<?xml version="1.0" encoding="UTF-8"?>

<feed xmlns="http://www.w3.org/2005/Atom">
  <title>andreysidorov.com</title>

  <link href="http://andreysidorov.com" />
  <updated>2013-08-18T14:12:13.732Z</updated>
  <id>http://andreysidorov.com/</id>
  <author>
    <name>Andrey Sidorov</name>
  </author>
  <atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://andreysidorov.com/feed.xml" />

  
    <entry>
      <title>How to use Blorg</title>
      <link href="http://andreysidorov.com/2013/08/how-to-use-blorg.html" />
      <updated>2013-08-19T00:00:00.000Z</updated>
      <id>http://andreysidorov.com/2013/08/how-to-use-blorg.html</id>
      <content type="html">
        &lt;h3&gt;Use Blorg For Much Win (presentation)&lt;/h3&gt;
&lt;p&gt;Just do it&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>Learn You The Node.js</title>
      <link href="http://andreysidorov.com/2013/08/learn-you-the-node.js.html" />
      <updated>2013-08-14T00:00:00.000Z</updated>
      <id>http://andreysidorov.com/2013/08/learn-you-the-node.js.html</id>
      <content type="html">
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://campjs.com/&quot;&gt;CampJS&lt;/a&gt;&lt;/strong&gt; has just finished, with a bigger crowd than last time around. It was lots of fun, and as usual, these events are more about meeting the people I collaborate, and socialise with online than anything else. There was a particularly large turn-out of the hackers on #polyhack, our Australian programmers channel on Freenode. Even &lt;a href=&quot;https://twitter.com/mwotton&quot;&gt;@mwotton&lt;/a&gt;, our resident Haskell-troll was there! Lots of photos and news can be found on &lt;a href=&quot;http://storify.com/campjs/campjs-ii&quot;&gt;Storify&lt;/a&gt;. The next one will likely be near Melbourne in February some time and I highly recommend it if you can get there.&lt;/p&gt;
&lt;h3&gt;Learn You The Node.js For Much Win (presentation)&lt;/h3&gt;
&lt;p&gt;I was struck last CampJS how many JavaScript newbies were there, or at least people who deal with JavaScript as a secondary language and therefore only have a cursory understanding of it. And by extension, there were not many people who had much understanding of Node. So I wanted to present some intro-to-Node material this time.&lt;/p&gt;
&lt;p&gt;I gave a 30 minute talk covering the very basics of &lt;em&gt;what Node &lt;strong&gt;is&lt;/strong&gt;&lt;/em&gt;, called &lt;strong&gt;Learn You The Node.js For Much Win&lt;/strong&gt;. Obviously the title is inspired by &lt;em&gt;&lt;a href=&quot;http://learnyouahaskell.com/&quot;&gt;Learn You a Haskell For Great Good&lt;/a&gt;&lt;/em&gt; and &lt;em&gt;&lt;a href=&quot;http://learnyousomeerlang.com/&quot;&gt;Learn You Some Erlang For Great Good&lt;/a&gt;&lt;/em&gt;. You can find my slides &lt;a href=&quot;http://r.va.gg/presentations/campjs-learn-you-node/&quot;&gt;here&lt;/a&gt; (feel free to rip them off if you need to give a similar talk somewhere!). The video may be online at some point in the future.&lt;/p&gt;
&lt;h3&gt;Learn You The Node.js For Much Win (workshop)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/BRWaBeeCcAA9R7v.jpg&quot; style=&quot;border-radius:4px; border: solid 2px white; box-shadow: 1px 1px 15px rgba(0,0,0,0.4);&quot;&gt;&lt;/p&gt;
&lt;p&gt;The next morning, I gave a workshop on the same topic but it was much more hands-on. The inspiration for my workshop came from &lt;a href=&quot;http://www.nodeconf.com/&quot;&gt;NodeConf&lt;/a&gt;, a couple of months earlier. &lt;a href=&quot;https://twitter.com/substack&quot;&gt;@substack&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/maxogden&quot;&gt;@maxogden&lt;/a&gt; presented a workshop titled &lt;strong&gt;stream adventure&lt;/strong&gt; which was a self-guided, interactive workshop for the terminal, built with Node. You can find it &lt;a href=&quot;https://github.com/substack/stream-adventure&quot;&gt;here&lt;/a&gt; and install it from npm with &lt;code&gt;npm install stream-adventure -g&lt;/code&gt;, I highly recommend it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://nodei.co/npm/stream-adventure/&quot;&gt;&lt;img src=&quot;https://nodei.co/npm/stream-adventure.png?downloads=true&amp;stars=true&quot; alt=&quot;NPM&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I was so inspired that I stole their code and made my own workshop application! &lt;strong&gt;&lt;a href=&quot;https://github.com/rvagg/learnyounode/&quot;&gt;learnyounode&lt;/a&gt;&lt;/strong&gt;. You can download and install it with &lt;code&gt;npm install learnyounode -g&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://nodei.co/npm/learnyounode/&quot;&gt;&lt;img src=&quot;https://nodei.co/npm/learnyounode.png?downloads=true&amp;stars=true&quot; alt=&quot;NPM&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The application itself is/was a series of 13 separate workshops. Starting off with a simple &lt;em&gt;HELLO WORLD&lt;/em&gt; and ending with a JSON API HTTP server (contributed by the very clever &lt;a href=&quot;https://twitter.com/sidorares&quot;&gt;@sidorares&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.github.com/rvagg/learnyounode/master/learnyounode.png&quot; alt=&quot;learnyounode&quot;&gt;&lt;/p&gt;
&lt;p&gt;Nobody actually managed to finish the workshops in the allotted 60 minutes, although &lt;a href=&quot;http://twitter.com/alexdickson&quot;&gt;@alexdickson&lt;/a&gt;, an expert JavaScripter but Node-n00b was the first one I heard of finishing it not long after.&lt;/p&gt;
&lt;p&gt;The workshops attempt to focus on some of the core concepts of Node. There&#39;s lots of console output because that&#39;s easiest to validate but it introduces filesystem I/O, both synchronous and asynchronous and moves straight on to networking because that&#39;s what Node is so good at. An &lt;em&gt;HTTP CLIENT&lt;/em&gt; example, introduces HTTP and is expanded on in &lt;em&gt;HTTP COLLECT&lt;/em&gt; which introduces streams. &lt;em&gt;JUGGLING ASYNC&lt;/em&gt; builds on &lt;em&gt;HTTP COLLECT&lt;/em&gt; to introduce the complexities of managing parallel asynchronous activities. From there, it switches from network clients to network servers, first a simple TCP server in &lt;em&gt;TIME SERVER&lt;/em&gt; and then using streams to serve files in &lt;em&gt;HTTP FILE SERVER&lt;/em&gt; and transforming data with &lt;em&gt;HTTP UPPERCASERER&lt;/em&gt;. The final exercise presents you with a more complex, closer-to-real-world example, an HTTP API server with multiple end-points.&lt;/p&gt;
&lt;p&gt;The entire workshop is designed to take longer than 1-hour, people ought to be able ot take it away and complete it later. It&#39;s also designed to be suitable for complete n00bs and also people with some experience, it ought to make a fun challenge for anyone already experienced with Node to see how quickly they can complete the examples (I believe I earned the honour of being the first person at NodeConf to finish stream-adventure in the allotted time!).&lt;/p&gt;
&lt;p&gt;The Node-experts at CampJS were thankfully helping out during the workshop so there wasn&#39;t much competition going on there.&lt;/p&gt;
&lt;p&gt;Many thanks to these expert Node nerds who hovered and helped people during the workshop and also did some test-driving of the workshop prior to the event:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/nicholasf&quot;&gt;Nicholas Faiz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/cgiffard&quot;&gt;Christopher Giffard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/secoif&quot;&gt;Tim Oxley&lt;/a&gt; (who also poured his heart and soul into organising CampJS)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://twitter.com/deoxxa&quot;&gt;Conrad Pankoff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/sidorares&quot;&gt;Andrey Sidorov&lt;/a&gt; (who also contributed the final exercise of the workshop)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/EugeneWare&quot;&gt;Eugene Ware&lt;/a&gt; (who was also brilliant all weekend, running the local &lt;a href=&quot;http://en.wikipedia.org/wiki/Sneakernet&quot;&gt;sneakernet&lt;/a&gt; because the network was so flakey)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;(I really hope I haven&#39;t missed anyone out there; so many quality nerds at CampJS!)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-tKp0U1N7XNw/UgngKk01qqI/AAAAAAAAAoc/xxAOCTqMCZ0/w600-h800-no/campJS+%252870+of+118%2529.jpg&quot; style=&quot;border-radius:4px; border: solid 2px white; box-shadow: 1px 1px 15px rgba(0,0,0,0.4);&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Tim Oxley making a contribution during the workshop, along with Christopher Giffard (left) and Eugene Ware (right)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I had the &lt;a href=&quot;http://r.va.gg/presentations/campjs-learn-you-node/workshop.html&quot;&gt;solutions&lt;/a&gt; to the workshop ready on the big-screen and walked through some of the early solutions and talked through what was going on. I didn&#39;t expect many people to listen to those bits and the workshop was designed so you could totally zone-out and do it at your own pace if that suited.&lt;/p&gt;
&lt;p&gt;If anyone wants to run a similar style workshop for their local meet-up, using the same content, I&#39;d love to receive contributions to &lt;strong&gt;learnyounode&lt;/strong&gt;. Alternatively, make your own! I extracted the core framework from &lt;strong&gt;learnyounode&lt;/strong&gt; and it now lives separately as &lt;strong&gt;&lt;a href=&quot;https://github.com/rvagg/workshopper&quot;&gt;workshopper&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://nodei.co/npm/workshopper/&quot;&gt;&lt;img src=&quot;https://nodei.co/npm/workshopper.png?downloads=true&amp;stars=true&quot; alt=&quot;NPM&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I would love feedback from anyone in attendance or anyone that uses this tool to run their own workshops! &lt;strong&gt;learnyounode&lt;/strong&gt; is already listed in Max Ogden&#39;s excellent &lt;strong&gt;&lt;a href=&quot;https://github.com/maxogden/art-of-node&quot;&gt;The Art of Node&lt;/a&gt;&lt;/strong&gt;, so I&#39;m looking forward to contributions to help turn this into a really useful teaching tool.&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>LevelDOWN Alternatives</title>
      <link href="http://andreysidorov.com/2013/06/leveldown-alternatives.html" />
      <updated>2013-06-07T00:00:00.000Z</updated>
      <id>http://andreysidorov.com/2013/06/leveldown-alternatives.html</id>
      <content type="html">
        &lt;p&gt;Since &lt;strong&gt;&lt;a href=&quot;https://github.com/rvagg/node-levelup&quot;&gt;LevelUP&lt;/a&gt;&lt;/strong&gt; v0.9, &lt;strong&gt;&lt;a href=&quot;https://github.com/rvagg/node-leveldown/&quot;&gt;LevelDOWN&lt;/a&gt;&lt;/strong&gt; has been an optional dependency, allowing you to switch in alternative back-ends.&lt;/p&gt;
&lt;p&gt;We have &lt;strong&gt;&lt;a href=&quot;https://github.com/rvagg/node-memdown&quot;&gt;MemDOWN&lt;/a&gt;&lt;/strong&gt;, a pure in-memory data-store, allowing you to run LevelUP against transient, and very fast storage.&lt;/p&gt;
&lt;p&gt;We also have &lt;strong&gt;&lt;a href=&quot;https://github.com/maxogden/level.js&quot;&gt;level.js&lt;/a&gt;&lt;/strong&gt; which works against &lt;strong&gt;IndexedDB&lt;/strong&gt;, allowing you to run LevelUP in the browser!&lt;/p&gt;
&lt;p&gt;Since LevelUP just needs some basic primitives and a sorted bi-directional iterator, we can swap out the back-end with numerous alternatives.&lt;/p&gt;
&lt;p&gt;The easy targets are the forks of LevelDB that purport to &lt;em&gt;fix&lt;/em&gt; or &lt;em&gt;improve&lt;/em&gt; LevelDB in some way. I have another post brewing on what I think about the claims made in this area and how we ought to approach them, but that can come later. For now I have some packages in npm for you to try for yourself!&lt;/p&gt;
&lt;h2&gt;Basho&lt;/h2&gt;
&lt;p&gt;First of all we have &lt;strong&gt;leveldown-basho&lt;/strong&gt; which bundles the &lt;a href=&quot;https://github.com/basho/leveldb&quot;&gt;Basho LevelDB fork&lt;/a&gt; into LevelDOWN. See Matthew Von-Maszewski&#39;s &lt;a href=&quot;https://speakerdeck.com/basho/optimizing-leveldb-for-performance-and-scale-ricon-east-2013&quot;&gt;slides&lt;/a&gt; from the recent Ricon East 2013 for more information on what they&#39;ve tried to do with LevelDB.&lt;/p&gt;
&lt;p&gt;In summary, Basho&#39;s aim is to optimise LevelDB &quot;for the server&quot;, particularly for high write throughput. They use &gt;1 compaction threads and relax the rules a little on overlapping keys for the lower levels. Plus a few other things that I won&#39;t get in to here.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install levelup leveldown-basho
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;levelup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;levelup&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;leveldown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;leveldown-basho&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;levelup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/path/to/db&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;leveldown&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;  
&lt;span class=&quot;c1&quot;&gt;// go to work on `db`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: some of the LevelDOWN and LevelUP tests are failing on the current build for this release, although I don&#39;t believe they should impact on standard usage but your mileage may vary...&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;HyperDex&lt;/h2&gt;
&lt;p&gt;Next, we have &lt;strong&gt;leveldown-hyper&lt;/strong&gt;, which bundles a fork by the people behind &lt;a href=&quot;http://hyperdex.org/&quot;&gt;HyperDex&lt;/a&gt;, a key-value store. Again their aim is to optimise LevelDB for a server environment. You can see some of their claims about performance &lt;a href=&quot;http://hyperdex.org/performance/leveldb/&quot;&gt;here&lt;/a&gt;. I don&#39;t know as much about this fork, I&#39;ll investigate further when I have time, but they are also using multiple compaction threads to do the background work.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install levelup leveldown-hyper
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;levelup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;levelup&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;leveldown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;leveldown-hyper&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;levelup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/path/to/db&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;leveldown&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;  
&lt;span class=&quot;c1&quot;&gt;// go to work on `db`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;i&gt;&lt;strike&gt;Lies!&lt;/strike&gt;&lt;/i&gt; Benchmarks!&lt;/h2&gt;
&lt;p&gt;OK, benchmarks kind of suck, particularly microbenchmarks. It&#39;s really hard to test something that&#39;s meaningful for everyone&#39;s use-case. But you can make pretty pictures with them and they can tell something of a story, even if it&#39;s just the first page of a novel.&lt;/p&gt;
&lt;p&gt;So here we go. I&#39;ve put together a simplistic benchmark that tries to test the kind of situation that these two forks are aiming to optimise for. In particular, high-throughput writes. There&#39;s a common claim that LevelDB has problems with writes because the compaction thread can hold up levels 0 and 1 while it&#39;s working on higher levels; and you really want to be flushing the new data as soon as possible so you can get more in. (Again, I have more to say on this &amp; the claims about &quot;fixing&quot; the problem in a later post).&lt;/p&gt;
&lt;p&gt;I have a sorted-write benchmark in the &lt;a href=&quot;https://github.com/rvagg/node-leveldown/tree/master/bench&quot;&gt;LevelDOWN repo&lt;/a&gt; that tries to push in 10M pre-sorted entries as fast as possible, fully utilising Node&#39;s worker-threads for the job. So this isn&#39;t your typical browser scenario. An important point here is that &lt;strong&gt;Node is a unique environment when looking at LevelDB performance&lt;/strong&gt;. It&#39;s not going to be a straightforward mapping of benchmark results obtained with other LevelDB bindings onto what we can achieve in Node.&lt;/p&gt;
&lt;p&gt;Because there are so many entries, instead of recording the time for individual writes, I&#39;ve recorded average time for batches of 1000 writes. Below you can see what the write-times look like when plotted over time. There are a bunch of outliers that are above the maximum Y of 0.6ms, but not enough to warrant distracting from the interesting behaviour below 0.6ms so I chopped it off there.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It is important to note that I&#39;m using the default options&lt;/strong&gt; here and this is where I&#39;ll probably cop some flak. Basho in particular advocate a healthy amount of &quot;tuning&quot; to achieve appropriate performance. In particular the write-buffer defaults to only 4M and you can push data in faster (at the cost of compactions later on) by increasing this. I think the forks may even have additional tunables of their own that you can fiddle with. But, this whole tuning thing is a rabbit hole I don&#39;t dare go down right now!&lt;/p&gt;
&lt;p&gt;I&#39;m running this on an i7-2630QM CPU, plenty of RAM and an SSD.&lt;/p&gt;
&lt;p&gt;You can see that we managed to push in the 10M entries in just over 95 seconds with the plain &lt;strong&gt;Google LevelDB (v1.10.0)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://r.va.gg/images/2013/06/write_sorted_times_g.png&quot; height=500 width=800 align=&quot;center&quot; /&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Next up we have the HyperDex fork. The main difference here is that we have it working slightly faster in total and the write-times have been trimmed down a bit to be more consistent. Not a bad effort with default settings, quite a nice picture.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://r.va.gg/images/2013/06/write_sorted_times_h.png&quot; height=500 width=800 align=&quot;center&quot; /&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Lastly we can see what Basho have done. They&#39;ve been on this case for a lot longer than HyperDex have and their fork, internally at least, diverges quite a bit from Google&#39;s LevelDB.&lt;/p&gt;
&lt;p&gt;We can see that the write-time has been considerably flattened; which is in line with what Basho claim and are aiming for, the consistency here is &lt;strong&gt;very&lt;/strong&gt; impressive. Unfortunately we&#39;ve ended up with a total time that is &lt;strong&gt;double&lt;/strong&gt; what it took Google&#39;s LevelDB to get the 10M entries in!&lt;/p&gt;
&lt;p&gt;No doubt this is probably something to do with the tunables, or perhaps I&#39;ve messed something up, anything&#39;s possible!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://r.va.gg/images/2013/06/write_sorted_times_b.png&quot; height=500 width=800 align=&quot;center&quot; /&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;So?&lt;/h2&gt;
&lt;p&gt;If you take anything away from this, here&#39;s what I think it should be: &lt;strong&gt;Do your own benchmarks if performance &lt;em&gt;really&lt;/em&gt; is an issue for you&lt;/strong&gt;. You&#39;re going to need some kind of benchmark suite that is tailored to your particular application. This will not only let you choose the appropriate storage system but it will give you something to work with when you start to get in to the mire that is &quot;tunables&quot;.&lt;/p&gt;
&lt;p&gt;It&#39;s likely I won&#39;t be able to leave this alone and will be posting more benchmarks with some tweaking and tuning. I&#39;d love to have input from others on this too of course! The code for this is all in the LevelDOWN repo with both of these forks under appropriately named branches.&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>LevelUP v0.9 Released</title>
      <link href="http://andreysidorov.com/2013/05/levelup-v0.9-released.html" />
      <updated>2013-05-21T00:00:00.000Z</updated>
      <id>http://andreysidorov.com/2013/05/levelup-v0.9-released.html</id>
      <content type="html">
        &lt;p&gt;&lt;img src=&quot;https://twimg0-a.akamaihd.net/profile_images/3360574989/92fc472928b444980408147e5e5db2fa_bigger.png&quot; alt=&quot;LevelDB&quot;&gt;&lt;/p&gt;
&lt;p&gt;As per my &lt;a href=&quot;http://r.va.gg/2013/05/levelup-v0.9-some-major-changes.html&quot;&gt;previous post&lt;/a&gt;, &lt;strong&gt;&lt;a href=&quot;https://github.com/rvagg/node-levelup&quot;&gt;LevelUP&lt;/a&gt; v0.9 has been released&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;I&#39;m doing a quick post about this release because it&#39;s got more changes in it than we normally see, including some things worth explaining.&lt;/p&gt;
&lt;h3&gt;Relationship to LevelDOWN&lt;/h3&gt;
&lt;p&gt;The biggest change is the removal of &lt;a href=&quot;https://github.com/rvagg/node-leveldown/&quot;&gt;LevelDOWN&lt;/a&gt; as a dependency, you should &lt;a href=&quot;http://r.va.gg/2013/05/levelup-v0.9-some-major-changes.html&quot;&gt;review what I&#39;ve already said about this&lt;/a&gt; as this will impact you if you&#39;re currently using LevelUP. In short, you&#39;ll either need to explicitly &lt;code&gt;npm install leveldown&lt;/code&gt; or switch to using the new &lt;a href=&quot;https://github.com/level/level&quot;&gt;Level&lt;/a&gt; package which bundles them both.&lt;/p&gt;
&lt;p&gt;Along with this change, we also get better &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt; support. See &lt;a href=&quot;https://github.com/maxogden/level.js&quot;&gt;level.js&lt;/a&gt; for more information on this.&lt;/p&gt;
&lt;h3&gt;Chained batch&lt;/h3&gt;
&lt;p&gt;The other major change is the introduction of a new &lt;strong&gt;chained batch&lt;/strong&gt; syntax, additional to the existing batch syntax. This method of creating and writing batch operations is much closer to the way LevelDB does batches and under certain circumstances you may find improved performance from using this method.&lt;/p&gt;
&lt;p&gt;If you call &lt;code&gt;db.batch()&lt;/code&gt; with no arguments, you&#39;ll get a &lt;code&gt;Batch&lt;/code&gt; object back which has the following operations: &lt;code&gt;put()&lt;/code&gt;, &lt;code&gt;del()&lt;/code&gt;, &lt;code&gt;clear()&lt;/code&gt; and &lt;code&gt;write()&lt;/code&gt;. The first three are chainable so you can call them one after the other to build your batch. &lt;code&gt;write()&lt;/code&gt; is the only method that takes a callback because it submits the batch. Until you call &lt;code&gt;write()&lt;/code&gt;, the batch is transient and can be discarded.&lt;/p&gt;
&lt;p&gt;Example from the &lt;a href=&quot;https://github.com/rvagg/node-levelup#readme&quot;&gt;README&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;del&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;father&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Yuri Irsenovich Kim&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;dob&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;16 February 1941&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;spouse&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Kim Young-sook&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;occupation&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Clown&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Done!&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Some love for WriteStream&lt;/h3&gt;
&lt;p&gt;WriteStream got some attention in this release. On the main &lt;code&gt;createWriteStream()&lt;/code&gt; method and on individual &lt;code&gt;write()&lt;/code&gt; calls, you can now pass some new options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;type&#39;&lt;/code&gt; can switch from the default &lt;code&gt;&#39;put&#39;&lt;/code&gt; to &lt;code&gt;&#39;del&#39;&lt;/code&gt; so you can make a WriteStream that only deletes when you &lt;code&gt;write({ key: &#39;foo&#39; })&lt;/code&gt;, or you can make individual writes delete: &lt;code&gt;write({ type: &#39;del&#39;, key: &#39;foo&#39; })&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;keyEncoding&#39;&lt;/code&gt; and &lt;code&gt;&#39;valueEncoding&#39;&lt;/code&gt; will switch from default encodings for the current LevelUP instance. Again, you can specify them on the main &lt;code&gt;createWriteStream()&lt;/code&gt; or on individual &lt;code&gt;write()&lt;/code&gt; calls.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Other changes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;a href=&quot;https://github.com/rvagg/node-levelup/pull/128&quot;&gt;race condition&lt;/a&gt; was fixed that allowed a &lt;code&gt;put()&lt;/code&gt; to write to the store before an iterator was obtained when calling `createReadStream().&lt;/li&gt;
&lt;li&gt;ReadStream no longer emits a &lt;code&gt;&#39;ready&#39;&lt;/code&gt; event.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;db&lt;/code&gt; property on LevelUP instances can be used to get access to LevelDOWN or whatever LevelDOWN-substitute you are using (this was &lt;code&gt;_db&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Some very LevelDB-specific methods have been deprecated on LevelUP and the documentation now recommends either directly using LevelDOWN or calling via the &lt;code&gt;db&lt;/code&gt; property. Specifically:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;db.db.approximateSize()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;leveldown.repair()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;leveldown.destroy()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LevelDOWN got a new LevelDB method: &lt;code&gt;getProperty()&lt;/code&gt; that currently understands 3 properties:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;db.db.getProperty(&#39;leveldb.num-files-at-levelN&#39;)&lt;/code&gt;: returns the number of files at level &lt;em&gt;N&lt;/em&gt;, where N is an integer representing a valid level (e.g. &quot;0&quot;)&#39;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;db.db.getProperty(&#39;leveldb.stats&#39;)&lt;/code&gt;: returns a multi-line string describing statistics about LevelDB&#39;s internal operation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;db.db.getProperty(&#39;leveldb.sstables&#39;)&lt;/code&gt;: returns a multi-line string describing all of the &lt;em&gt;sstables&lt;/em&gt; that make up contents of the current database.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Significantly improved ReadStream performance improvements (up to 50% faster).&lt;/li&gt;
&lt;li&gt;Some LevelDOWN memory leaks discovered and fixed.&lt;/li&gt;
&lt;li&gt;LevelDOWN upgraded to LevelDB@1.10.0, &lt;a href=&quot;https://groups.google.com/forum/#!topic/node-levelup/bly-MiUzrZw&quot;&gt;details here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Who you should thank&lt;/h3&gt;
&lt;p&gt;A lot of people put in work to this release. There&#39;s a &lt;a href=&quot;https://github.com/rvagg/node-levelup#contributors&quot;&gt;team of people&lt;/a&gt; that can claim ownership of LevelUP, LevelDOWN and related projects and most of them have been involved in this release. You should follow these people on Twitter and GitHub!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dominic Tarr&lt;/strong&gt; (&lt;a href=&quot;https://github.com/dominictarr&quot;&gt;GitHub/dominictarr&lt;/a&gt; / &lt;a href=&quot;http://twitter.com/dominictarr&quot;&gt;Twitter/@dominictarr&lt;/a&gt;) contributed to the ReadStream fixes and is just a generally valuable &amp; awesome sage in the LevelDB + Node community.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Julian Gruber&lt;/strong&gt; (&lt;a href=&quot;https://github.com/juliangruber&quot;&gt;GitHub/juliangruber&lt;/a&gt; / &lt;a href=&quot;http://twitter.com/juliangruber&quot;&gt;Twitter/@juliangruber&lt;/a&gt;) contributed the encoding options for WriteStreams and most of the work on the new chained &lt;code&gt;batch()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Matteo Collina&lt;/strong&gt; (&lt;a href=&quot;https://github.com/mcollina&quot;&gt;GitHub/mcollina&lt;/a&gt; / &lt;a href=&quot;https://twitter.com/matteocollina&quot;&gt;Twitter/@matteocollina&lt;/a&gt;) contributed the &lt;code&gt;&#39;type&#39;&lt;/code&gt; options for WriteStreams and most of the work on performance improvements to ReadStreams.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;David Björklund&lt;/strong&gt; (&lt;a href=&quot;https://github.com/kesla&quot;&gt;GitHub/kesla&lt;/a&gt; / &lt;a href=&quot;http://twitter.com/david_bjorklund&quot;&gt;Twitter/@david_bjorklund&lt;/a&gt;) also contributed work on ReadStream performance.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Max Ogden&lt;/strong&gt; (&lt;a href=&quot;https://github.com/maxogden&quot;&gt;GitHub/maxogden&lt;/a&gt; / &lt;a href=&quot;http://twitter.com/maxogden&quot;&gt;Twitter/@maxogden&lt;/a&gt;) and &lt;strong&gt;Anton Whalley&lt;/strong&gt; (&lt;a href=&quot;https://github.com/No9&quot;&gt;GitHub/No9&lt;/a&gt; / &lt;a href=&quot;https://twitter.com/antonwhalley&quot;&gt;Twitter/@antonwhalley&lt;/a&gt;) both worked on extracting most of the LevelDOWN test suite into &lt;a href=&quot;https://github.com/rvagg/node-abstract-leveldown&quot;&gt;AbstractLevelDOWN&lt;/a&gt; to form a LevelDOWN-spec that&#39;s also runnable in browser environments.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And others, who you can find in &lt;a href=&quot;https://github.com/rvagg/node-levelup/pull/129&quot;&gt;this 0.9 WIP thread&lt;/a&gt;, plus additional users who reported &amp; found issues.&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>LevelUP v0.9 - Some Major Changes</title>
      <link href="http://andreysidorov.com/2013/05/levelup-v0.9-some-major-changes.html" />
      <updated>2013-05-20T00:00:00.000Z</updated>
      <id>http://andreysidorov.com/2013/05/levelup-v0.9-some-major-changes.html</id>
      <content type="html">
        &lt;p&gt;&lt;img src=&quot;https://twimg0-a.akamaihd.net/profile_images/3360574989/92fc472928b444980408147e5e5db2fa_bigger.png&quot; alt=&quot;LevelDB&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rvagg/node-levelup&quot;&gt;LevelUP&lt;/a&gt; is still quite young and bound to go through some major shifts. It&#39;s best to not be too tied to immature APIs early in a project&#39;s lifetime.&lt;/p&gt;
&lt;p&gt;That said, we&#39;re very interested in stability so we try to keep breaking changes to a minimum. However, we&#39;re about to publish version 0.9 and there&#39;s one change that&#39;s not exactly a &quot;breaking&quot; change in the normal sense, but it is something that I need to explain because it will impact on almost everyone currently using LevelUP.&lt;/p&gt;
&lt;h3&gt;Severing the dependency on LevelDOWN&lt;/h3&gt;
&lt;p&gt;LevelUP depends on &lt;a href=&quot;https://github.com/rvagg/node-leveldown/&quot;&gt;LevelDOWN&lt;/a&gt; to do its &lt;em&gt;LevelDB thing&lt;/em&gt;. LevelDOWN was once part of LevelUP until we split it off to a discrete project that focuses entirely on acting as a direct C++ bridge between LevelDB and Node. We get to focus on making LevelUP an awesome LevelDB-ish interface without being tied directly to LevelDB implementation details (e.g. Iterators vs Streams).&lt;/p&gt;
&lt;p&gt;In fact, a new project was spawned to define the LevelDOWN interface that LevelUP requires. &lt;a href=&quot;https://github.com/rvagg/node-abstract-leveldown&quot;&gt;AbstractLevelDOWN&lt;/a&gt; is a set of strict tests for the functionality that LevelUP uses and it also implements a basic abstract shell that can be extended to create additional back-ends for LevelUP.&lt;/p&gt;
&lt;p&gt;So far, there are 3 projects worth mentioning that extend AbstractLevelDOWN:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/maxogden/level.js&quot;&gt;level.js&lt;/a&gt;&lt;/strong&gt; operates on top of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/IndexedDB&quot;&gt;IndexedDB&lt;/a&gt; (which is in turn implemented on top of &lt;a href=&quot;https://code.google.com/p/leveldb/&quot;&gt;LevelDB&lt;/a&gt; in Chrome!).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/No9/node-leveldown-gap&quot;&gt;leveldown-gap&lt;/a&gt;&lt;/strong&gt; is another browser implementation that uses &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/DOM/Storage#localStorage&quot;&gt;localStorage&lt;/a&gt; and is designed to be able to work in &lt;a href=&quot;http://phonegap.com/&quot;&gt;PhoneGap&lt;/a&gt; applications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/rvagg/node-memdown&quot;&gt;MemDOWN&lt;/a&gt;&lt;/strong&gt; is a pure in-memory implementation that doesn&#39;t touch the disk. It&#39;s obviously not good for persistent data but sometimes that&#39;s not what you need.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Plus some other efforts to adapt other embedded and non-embedded data stores to the LevelDOWN interface. Additionally, there are other versions of LevelDB that can be used, including the fork that &lt;a href=&quot;http://basho.com/&quot;&gt;Basho&lt;/a&gt; maintains for use in &lt;a href=&quot;http://basho.com/riak/&quot;&gt;Riak&lt;/a&gt;. (I have a branch of LevelDOWN that uses this version of LevelDB that I&#39;ll release as soon as I can explain and demonstrate the performance differences to vanilla LevelDB for Node users).&lt;/p&gt;
&lt;p&gt;In short, LevelUP doesn&#39;t &lt;em&gt;need&lt;/em&gt; LevelDOWN in the way it once did and LevelUP is turning into a more generic interface to sorted key/value storage systems, albeit with a distinct LevelDB-flavour.&lt;/p&gt;
&lt;p&gt;Since version 0.8 we&#39;ve supported a &lt;code&gt;&#39;db&#39;&lt;/code&gt; option when you create a LevelUP instance. This option can be used to provide an alternative LevelDOWN-compatible back-end. Unfortunately, LevelDOWN being defined as a strict dependency of LevelUP means that each time you install it you have to compile LevelDOWN, even if you don&#39;t want it. So, we&#39;ve removed it as a dependency but it&#39;s still &lt;em&gt;wired up&lt;/em&gt; so that that the only thing you need to do is actually install LevelDOWN alongside LevelUP and it&#39;ll take care of the rest.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install levelup leveldown
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;From version 0.9 onwards, you&#39;ll need to do this, or you&#39;ll see an (informative) error.&lt;/p&gt;
&lt;h3&gt;Introducing &quot;Level&quot;&lt;/h3&gt;
&lt;p&gt;To make life easier, we&#39;re publishing an additional package in npm that will make this easier by bundling both LevelUP and LevelDOWN as dependencies and exposing LevelUP directly. The &lt;strong&gt;&lt;a href=&quot;https://github.com/level/level&quot;&gt;Level&lt;/a&gt;&lt;/strong&gt; package is a very simple wrapper that exists purely as a convenience. It&#39;ll track the same versioning as LevelUP so it&#39;s a straight substitution.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install level
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can simply change your &lt;code&gt;&quot;dependencies&quot;&lt;/code&gt; from &lt;strong&gt;&quot;levelup&quot;&lt;/strong&gt; to &lt;strong&gt;&quot;level&quot;&lt;/strong&gt;, plus you can use it just like LevelUP:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;levelup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;level&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;levelup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./my.db&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;yay!&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;it works!&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Switching things up&lt;/h3&gt;
&lt;p&gt;Now we have a properly pluggable back-end, expect to see a growing array of choice and innovation. The most exciting space at the moment is browser-land. Consider &lt;strong&gt;level.js&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;levelup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;levelup&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;leveljs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;level-js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;levelup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;leveljs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;LevelUP string&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;name=&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yep, that&#39;s browser code. Simply &lt;code&gt;npm install levelup level-js&lt;/code&gt; and run the module through &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt; and you get the full LevelUP API in your browser!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Stay tuned! This is just one step in the quest for a truly modular database system that lets you build a database that suits your applications and not the other way around.&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>Node.ninjas Presentation - LevelDB and Node Sitting in a Tree</title>
      <link href="http://andreysidorov.com/2013/05/node.ninjas-presentation-leveldb-and-node-sitting-in-a-tree.html" />
      <updated>2013-05-09T00:00:00.000Z</updated>
      <id>http://andreysidorov.com/2013/05/node.ninjas-presentation-leveldb-and-node-sitting-in-a-tree.html</id>
      <content type="html">
        &lt;p&gt;I&#39;m giving a presentation at &lt;a href=&quot;http://www.meetup.com/sydney-node-ninjas/&quot;&gt;Node.ninjas&lt;/a&gt; tonight in Sydney. I&#39;ve put together a talk about LevelDB and Node that covers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What LevelDB &lt;em&gt;is&lt;/em&gt; and the basics of how it works&lt;/li&gt;
&lt;li&gt;A quick introduction to the core LevelDB libraries in Node: &lt;a href=&quot;https://github.com/rvagg/node-levelup&quot;&gt;LevelUP&lt;/a&gt; and &lt;a href=&quot;https://github.com/rvagg/node-leveldown/&quot;&gt;LevelDOWN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Some preaching about the awesomeness of modularity around a small, extensible core; including a whirlwind tour of the current, flourishing, LevelDB+Node ecosystem&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It&#39;s this last point that excites me the most. There&#39;s some very smart people building some very clever pieces to the &lt;em&gt;Node Database&lt;/em&gt; puzzle. What&#39;s more, people are actually building functional databases in Node now, I&#39;ve just collected a list from npm of what looks like functional databases that use LevelDB:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rumours&lt;/li&gt;
&lt;li&gt;LevelGraph&lt;/li&gt;
&lt;li&gt;PushDB&lt;/li&gt;
&lt;li&gt;NeutrinoDB&lt;/li&gt;
&lt;li&gt;PlumbDB&lt;/li&gt;
&lt;li&gt;Syncstore&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And a few more that look like a work in progress. Plus, I&#39;m sure there&#39;s more people out there we&#39;ve never even heard of who are cooking up some amazing things using the LevelDB+Node combination!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The slides to my talk are &lt;a href=&quot;http://r.va.gg/presentations/node.ninjas/&quot;&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>LevelDB and Node: Getting Up and Running</title>
      <link href="http://andreysidorov.com/2013/05/leveldb-and-node-getting-up-and-running.html" />
      <updated>2013-05-04T00:00:00.000Z</updated>
      <id>http://andreysidorov.com/2013/05/leveldb-and-node-getting-up-and-running.html</id>
      <content type="html">
        &lt;p&gt;This is the second article in a three-part series on LevelDB and how it can be used in Node.&lt;/p&gt;
&lt;ul class=&quot;parts&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;http://dailyjs.com/2013/04/19/leveldb-and-node-1/&quot;&gt;Part 1: What is LevelDB Anyway?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dailyjs.com/2013/05/03/leveldb-and-node-2/&quot;&gt;&lt;strong&gt;Part 2: Getting Up and Running&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our first article covered the basics of LevelDB and its internals. If you haven&#39;t already read it you are encouraged to do so as we will be building upon this knowledge as we introduce the Node interface in this article.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://dailyjs.com/images/posts/leveldb.png&quot; alt=&quot;LevelDB&quot;&gt;&lt;/p&gt;
&lt;p&gt;There are two primary libraries for using LevelDB in Node, &lt;strong&gt;&lt;a href=&quot;https://github.com/rvagg/node-leveldown&quot;&gt;LevelDOWN&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&quot;https://github.com/rvagg/node-levelup&quot;&gt;LevelUP&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LevelDOWN&lt;/strong&gt; is a pure C++ interface between Node.js and LevelDB. Its API provides limited &lt;em&gt;sugar&lt;/em&gt; and is mostly a straight-forward mapping of LevelDB&#39;s operations into JavaScript. All I/O operations in LevelDOWN are asynchronous and take advantage of LevelDB&#39;s thread-safe nature to parallelise reads and writes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LevelUP&lt;/strong&gt; is the library that the majority of people will use to interface with LevelDB in Node. It wraps LevelDOWN to provide a more Node.js-style interface. Its API provides more &lt;em&gt;sugar&lt;/em&gt; than LevelDOWN, with features such as optional arguments.&lt;/p&gt;
&lt;p&gt;LevelUP exposes iterators as Node.js-style object streams. A LevelUP &lt;strong&gt;ReadStream&lt;/strong&gt; can be used to read sequential entries, forward or reverse, to and from any key.&lt;/p&gt;
&lt;p&gt;LevelUP handles JSON and other encoding types for you. For example, when operating on a LevelUP instance with JSON value-encoding, you simply pass in your objects for writes and they are serialised for you. Likewise, when you read them, they are deserialised and passed back in their original form.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Continue reading this article on &lt;a href=&quot;http://dailyjs.com/2013/05/03/leveldb-and-node-2/&quot;&gt;DailyJS.com&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>LevelDB and Node: What is LevelDB Anyway?</title>
      <link href="http://andreysidorov.com/2013/05/leveldb-and-node-what-is-leveldb-anyway.html" />
      <updated>2013-05-01T06:30:00.000Z</updated>
      <id>http://andreysidorov.com/2013/05/leveldb-and-node-what-is-leveldb-anyway.html</id>
      <content type="html">
        &lt;p&gt;This is the first article in a three-part series on LevelDB and how it can be used in Node.&lt;/p&gt;
&lt;p&gt;This article will cover the LevelDB basics and internals to provide a foundation for the next two articles. The second and third articles will cover the core LevelDB Node libraries: &lt;a href=&quot;https://github.com/rvagg/node-levelup&quot;&gt;LevelUP&lt;/a&gt;, &lt;a href=&quot;https://github.com/rvagg/node-leveldown&quot;&gt;LevelDOWN&lt;/a&gt; and the rest of the LevelDB ecosystem that&#39;s appearing in Node-land.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://dailyjs.com/images/posts/leveldb.png&quot; alt=&quot;LevelDB&quot;&gt;&lt;/p&gt;
&lt;h3&gt;What is LevelDB?&lt;/h3&gt;
&lt;p&gt;LevelDB is an &lt;em&gt;open-source&lt;/em&gt;, &lt;em&gt;dependency-free&lt;/em&gt;, &lt;em&gt;embedded key/value data store&lt;/em&gt;. It was developed in 2011 by Jeff Dean and Sanjay Ghemawat, researchers from Google. It&#39;s written in C++ although it has third-party bindings for most common programming languages. Including JavaScript / Node.js of course.&lt;/p&gt;
&lt;p&gt;LevelDB is based on ideas in Google&#39;s BigTable but does not share code with BigTable, this allows it to be licensed for open source release. Dean and Ghemawat developed LevelDB as a replacement for SQLite as the backing-store for Chrome&#39;s IndexedDB implementation.&lt;/p&gt;
&lt;p&gt;It has since seen very wide adoption across the industry and serves as the back-end to a number of new databases and is now the recommended storage back-end for Riak.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Continue reading this article on &lt;a href=&quot;http://dailyjs.com/2013/04/19/leveldb-and-node-1/&quot;&gt;DailyJS.com&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>Node.js Dublin Presentation - LevelDB</title>
      <link href="http://andreysidorov.com/2013/05/node.js-dublin-presentation-leveldb.html" />
      <updated>2013-05-01T06:00:00.000Z</updated>
      <id>http://andreysidorov.com/2013/05/node.js-dublin-presentation-leveldb.html</id>
      <content type="html">
        &lt;p&gt;I visited lovely Dublin last month to attend &lt;a href=&quot;http://peerconf.com/&quot;&gt;PeerConf&lt;/a&gt;. While there I got to meet a great bunch of Irish programmers at &lt;a href=&quot;http://www.nodejsdublin.com/&quot;&gt;Node.js Dublin&lt;/a&gt;, a semi-regular Node.js meet-up that happens in the &lt;a href=&quot;https://www.engineyard.com/&quot;&gt;Engine Yard&lt;/a&gt; office in Dublin.&lt;/p&gt;
&lt;p&gt;I was invited to give a presentation on LevelDB and the work that I&#39;ve been doing on it in Node.js. I was followed by &lt;a href=&quot;https://github.com/dominictarr&quot;&gt;Dominic Tarr&lt;/a&gt; who&#39;s doing some amazing work on top of LevelDB.&lt;/p&gt;
&lt;p&gt;You can view my slides &lt;a href=&quot;http://r.va.gg/presentations/nodejsdub/&quot;&gt;here&lt;/a&gt; but a written version is currently being spread over 3 parts on &lt;a href=&quot;http://dailyjs.com&quot;&gt;DailyJS&lt;/a&gt;. More about that soon!&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>Announcing Bean v1.0.0</title>
      <link href="http://andreysidorov.com/2012/09/bean-v1.html" />
      <updated>2012-09-08T12:41:12.000Z</updated>
      <id>http://andreysidorov.com/2012/09/bean-v1.html</id>
      <content type="html">
        &lt;p&gt;In my &lt;a href=&quot;http://rod.vagg.org/2012/08/bean_v1/&quot; title=&quot;Towards Bean v1.0 (or: How event managers do their thing)&quot;&gt;previous post&lt;/a&gt; about Bean I discussed in detail the work that has gone in to a v1 release and how it will differ from the v0.4 branch.&lt;/p&gt;
&lt;p&gt;Bean version 1.0.0 has now been released, you can download it from the &lt;a href=&quot;https://github.com/fat/bean&quot;&gt;GitHub repository&lt;/a&gt; or you can fetch it from &lt;a href=&quot;https://npmjs.org/package/bean&quot;&gt;npm&lt;/a&gt; for your Ender builds.&lt;/p&gt;
&lt;p&gt;Here&#39;s a quick summary of the changes, but for a more in-depth look you should refer to my &lt;a href=&quot;http://rod.vagg.org/2012/08/bean_v1/&quot; title=&quot;Towards Bean v1.0 (or: How event managers do their thing)&quot;&gt;previous post&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;b&gt;&lt;code&gt;on()&lt;/code&gt; argument ordering&lt;/b&gt;: the new signature is now &lt;code&gt;.on(events[, selector], handlerFn)&lt;/code&gt;, which will work on both Bean as a standalone library and when bundled in Ender. In Ender, the following aliases also pass through &lt;code&gt;on()&lt;/code&gt; so the same arguments work: &lt;code&gt;addListener()&lt;/code&gt;, &lt;code&gt;bind()&lt;/code&gt;, &lt;code&gt;listen()&lt;/code&gt; and &lt;code&gt;one()&lt;/code&gt; (which of course will only trigger once). Plus all the specific shortcuts such as &lt;code&gt;click()&lt;/code&gt;, &lt;code&gt;keyup()&lt;/code&gt; etc. although these methods have the first argument hardwired.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;add()&lt;/code&gt; is left intact with the same argument ordering for standalone Bean and &lt;code&gt;delegate()&lt;/code&gt; has the same signature, the same as jQuery&#39;s equivalent.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;code&gt;off()&lt;/code&gt; is the new &lt;code&gt;remove()&lt;/code&gt;&lt;/b&gt;: although &lt;code&gt;remove()&lt;/code&gt; is still available in standalone Bean.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Bean attaches a single handler to the DOM for each event type on each element&lt;/b&gt;: as outlined above, Bean will iterate over all handlers for each triggered and (mostly) reuse the same Event object for each call.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;code&gt;Event.stopImmediatePropagation()&lt;/code&gt;:&lt;/b&gt; is available across all supported browsers, it will stop the processing of all handlers for the current event at the current element (i.e. the event will still bubble).&lt;/p&gt;
&lt;p&gt;&lt;b&gt;The selector engine argument to &lt;code&gt;add()&lt;/code&gt; is now completely removed&lt;/b&gt;: you used to have to pass a selector engine in as the last argument for delegated events. Now you must set it once at start-up with &lt;code&gt;setSelectorEngine()&lt;/code&gt;. This is automatically taken care of for you in an Ender build.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;A duplicate-handler check is no longer performed when you &lt;i&gt;add&lt;/i&gt;&lt;/b&gt;: performance testing showed that this was a massive slow-down and is simply not something that Bean should be responsible for. If you want to add the same handler twice then that&#39;s your business and responsibility.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Namespace matching for event &lt;code&gt;fire()&lt;/code&gt;ing now matches namespaces using an &lt;i&gt;and&lt;/i&gt; instead of an &lt;code&gt;or&lt;/code&gt;:&lt;/b&gt; so for example, firing namespaces &#39;a.b&#39; will fire any event with &lt;i&gt;both&lt;/i&gt; &#39;a&#39; and &#39;b&#39; rather than &lt;i&gt;either&lt;/i&gt; &#39;a&#39; or &#39;b&#39;. This is compatible with jQuery and is arguably a much more sensible and helpful way to deal with namespaces. You can find some discussion on this &lt;a href=&quot;https://github.com/fat/bean/pull/68&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Lots of internal improvements for speed, code size, etc.&lt;/b&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There was one remaining question to be resolved&amp;mdash;whether &lt;code&gt;Event.stop()&lt;/code&gt; would also trigger &lt;code&gt;Event.stopImmediatePropagation()&lt;/code&gt;. I&#39;ve decided to &lt;b&gt;not&lt;/b&gt; include it and leave it to the user to decide whether they want to prevent triggering of other listeners on the same event/element.&lt;/p&gt;
&lt;p&gt;And that&#39;s it! Please give it a spin and open an issue on GitHub if you have any bugs to report or questions to be answered.&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>How Ender bundles libraries for the browser</title>
      <link href="http://andreysidorov.com/2012/08/ender-bundling.html" />
      <updated>2012-08-24T03:21:38.000Z</updated>
      <id>http://andreysidorov.com/2012/08/ender-bundling.html</id>
      <content type="html">
        &lt;p&gt;I was asked an interesting Ender question on IRC (#enderjs on Freenode) and as I was answering it, it occurred to me that the subject would be an ideal way to explain how Ender&#39;s multi-library bundling works. So here is that explanation!&lt;/p&gt;&lt;p&gt;The original question went something like this:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;When a browser first visits my page, they only get served Bonzo (a DOM manipulation library) as a stand-alone library, but on returning visits they are also served Qwery (a selector engine), Bean (an event manager) and a few other modules in an Ender build. Can I integrate Bonzo into the Ender build on the browser for repeat visitors?&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;Wait, what&#39;s Ender?&lt;/h3&gt;&lt;p&gt;Let&#39;s step back a bit and start with some basics. The way I generally explain Ender to people is that it&#39;s two different things:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;It&#39;s a build tool, for bundling JavaScript libraries together into a single file. The resulting file constitutes a new &quot;framework&quot; based around the jQuery-style DOM element collection pattern: &lt;code&gt;$(&#39;selector&#39;).method()&lt;/code&gt;. The constituent libraries provide the functionality for the &lt;em&gt;methods&lt;/em&gt; and may also provide the selector engine functionality.&lt;/li&gt;&lt;li&gt;It&#39;s an &lt;em&gt;ecosystem&lt;/em&gt; of JavaScript libraries. Ender promotes a small collection of libraries as a base, called &lt;strong&gt;The Jeesh&lt;/strong&gt;, which together provide a large portion of the functionality normally required of a JavaScript framework, but there are many more libraries compatible with Ender that add extra functionality. Many of the libraries available for Ender are also usable outside of Ender as stand-alone libraries.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Continue reading this article on &lt;a href=&quot;http://dailyjs.com/2012/08/23/ender-tutorial/&quot;&gt;DailyJS.com&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>Towards Bean v1.0 (or: How event managers do their thing)</title>
      <link href="http://andreysidorov.com/2012/08/bean_v1.html" />
      <updated>2012-08-10T13:20:56.000Z</updated>
      <id>http://andreysidorov.com/2012/08/bean_v1.html</id>
      <content type="html">
        &lt;p&gt;&lt;b&gt;&lt;a href=&quot;https://github.com/fat/bean&quot;&gt;Bean&lt;/a&gt;&lt;/b&gt; is the event manager included in &lt;b&gt;&lt;a href=&quot;http://ender.no.de/&quot;&gt;Ender&#39;s&lt;/a&gt;&lt;/b&gt; starter pack, &lt;i&gt;The Jeesh&lt;/i&gt;. If you want to do jQuery-style &lt;code&gt;bind()&lt;/code&gt;, &lt;code&gt;on()&lt;/code&gt; etc. with Ender, then use Bean.&lt;/p&gt;
&lt;p&gt;At the time of writing, we&#39;re on version &lt;i&gt;0.4.11&lt;/i&gt;. There&#39;s also been a &lt;i&gt;0.5-wip&lt;/i&gt; (&quot;work in progress&quot;) branch for a while now that&#39;s included some improvements I&#39;ve been holding off for a major release. I also put together a &lt;a href=&quot;https://github.com/fat/bean/issues/milestones&quot;&gt;0.5 milestone&lt;/a&gt; on GitHub with some ideas. The major item impacting on the external API is a switch to the &lt;code&gt;on()&lt;/code&gt; argument order found in &lt;a href=&quot;http://api.prototypejs.org/dom/Event/on/&quot;&gt;Prototype&lt;/a&gt;, &lt;a href=&quot;http://api.jquery.com/on/&quot;&gt;jQuery&lt;/a&gt; and &lt;a href=&quot;https://github.com/madrobby/zepto/blob/753e80114f0618bd7ce865508e0ff2085d0bfb5f/src/event.js#L166&quot;&gt;Zepto&lt;/a&gt;. Considering the significance of the changes in the new branch, I think that perhaps a &lt;b&gt;1.0&lt;/b&gt; release would be warranted.&lt;/p&gt;
&lt;h3&gt;Delegated &lt;code&gt;on()&lt;/code&gt; argument ordering&lt;/h3&gt;

&lt;p&gt;Until now, Bean&#39;s &lt;code&gt;add()&lt;/code&gt; has followed the same argument ordering as jQuery&#39;s &lt;code&gt;&lt;a href=&quot;http://api.jquery.com/bind/&quot;&gt;bind()&lt;/a&gt;&lt;/code&gt; for standard events, and &lt;code&gt;&lt;a href=&quot;http://api.jquery.com/delegate/&quot;&gt;delegate()&lt;/a&gt;&lt;/code&gt; for delegated events; so the signature looks something like this: &lt;code&gt;.add([selector, ]events, handlerFn)&lt;/code&gt; (.on() exists in the Ender bridge and does the same thing). The proposal was to change this to match the other major libraries&#39;, arguably more sensible, &lt;code&gt;.on(events[, selector], handlerFn)&lt;/code&gt;. This is now in the &lt;i&gt;0.5-wip&lt;/i&gt; branch.&lt;/p&gt;
&lt;h3&gt;Performance&lt;/h3&gt;

&lt;p&gt;Speed was another issue that I wanted to address for a new major release. Benchmarks have shown that Bean is under-performing in some areas and I believed it could do better. The process of analysing and addressing Bean&#39;s performance has been quite instructional and I&#39;ve narrowed it down to some key trade-offs that authors of event libraries have deal with. One of the reasons I wanted to write this post was to outline some of these and solicit some feedback from the wider Bean-using community.&lt;/p&gt;
&lt;h4&gt;Performance trade-off #1: record keeping&lt;/h4&gt;

&lt;p&gt;When you call &lt;code&gt;Element.attachEvent()&lt;/code&gt; (IE8 and below) or &lt;code&gt;Element.addEventListener()&lt;/code&gt; (new browsers) you pass in a handler function that&#39;s called when the event in question is triggered. To stop that function being triggered you have to call &lt;code&gt;Element.detachEvent()&lt;/code&gt; or &lt;code&gt;Element.removeEventListener()&lt;/code&gt; and pass in that same function so the browser knows which handler you want to remove. Event managers like Bean and jQuery make that easier so you can do things like &lt;code&gt;bean.remove(element, &#39;click&#39;)&lt;/code&gt; to remove all handlers; but Bean needs to know which handlers it needs to remove so it must keep records. The biggest change back in v0.4 of Bean was a switch to an internal registry that didn&#39;t molest DOM elements, external objects or external functions to attach identifiers so they could be later recalled. Previously, a &lt;code&gt;&lt;strong&gt;uid&lt;/code&gt; property was set on each DOM element that you set a handler on and your handler function itself had a &lt;code&gt;&lt;/strong&gt;uid&lt;/code&gt; property set on it. jQuery does this too, it has a global &lt;code&gt;jQuery.guid&lt;/code&gt; integer that it increments and attaches to pretty much everything. Don&#39;t be surprised when you find a &lt;code&gt;guid&lt;/code&gt; property on your object/function/element once jQuery has got its fingers on it. This type of record keeping is fast and easy, but molesting other people&#39;s objects isn&#39;t very cool and there are alternatives.&lt;/p&gt;
&lt;p&gt;My first major contribution to Bean was to switch it over to a registry similar to the one Deigo Perini has implemented in &lt;a href=&quot;https://github.com/dperini/nwevents/&quot;&gt;NWEvents&lt;/a&gt;. Bean now iterates and compares rather than looking up directly. It adds some overhead but I managed to squeeze in enough performance gains in other areas to make v0.4 generally faster than v0.3 even with the registry switch.&lt;/p&gt;
&lt;h4&gt;Performance trade-off #2: synthesising the Event object&lt;/h4&gt;

&lt;p&gt;The DOM Level 3 Events specification outlines a base &lt;a href=&quot;http://www.w3.org/TR/DOM-Level-3-Events/#interface-Event&quot;&gt;Event object interface&lt;/a&gt;, along with specific event types that extend this and add extra attributes and methods. This is the object that you get when your event handler is triggered by the DOM, it&#39;s the object that you read &lt;code&gt;keyCode&lt;/code&gt; from for keyboard events and the object that you call &lt;code&gt;preventDefault()&lt;/code&gt; and &lt;code&gt;stopPropagation()&lt;/code&gt; on.&lt;/p&gt;
&lt;p&gt;The problem we have is that nobody actually implements the full spec as-is and we also have to deal with older browsers which have all sorts of interesting attributes and methods on their Event objects. The stand-out difference is that in IE8 and below, instead of calling &lt;code&gt;Event.preventDefault()&lt;/code&gt; to prevent the default browser behaviour (e.g. following a link click or accepting a keypress), you have to &lt;code&gt;Event.returnValue = false&lt;/code&gt;. And, instead of calling &lt;code&gt;Event.stopPropagation()&lt;/code&gt; to stop the event from bubbling up the DOM to parent elements, you have &lt;code&gt;Event.cancelBubble = true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, the standard practice is for event managers to either create an Event object for you and set up the properties and methods based on the underlying &lt;i&gt;actual&lt;/i&gt; Event object (as in Bean, jQuery and most others), or &lt;i&gt;fix&lt;/i&gt; the Event object (as in Prototype). The performance trade-off here is that this is not cheap to do, especially for &lt;i&gt;every&lt;/i&gt; event you need to react to. But there are ways to speed it up.&lt;/p&gt;
&lt;p&gt;In Bean v0.4 we introduced a property &quot;whitelist&quot; which provided significant performance gains. In v0.3 and prior, Bean would try and copy every property and method that it found on the original Event object over to a new object (&lt;code&gt;{}&lt;/code&gt;). It turns out that accessing some of these properties on some browsers comes with a significant performance penalty, and often you just don&#39;t need them because they are specific quirks of individual browsers. Since v0.4, Bean has been only looking at a list of properties that it expects to find on particular types of event objects and ignoring the rest. In the 0.5-wip branch, I started caching event &quot;fixers&quot; for each event type as they were encountered, so it&#39;s a little faster to figure out exactly what needs to be done as events are triggered.&lt;/p&gt;
&lt;p&gt;But, it&#39;s still costly, so that&#39;s where the next performance trade-off comes in.&lt;/p&gt;
&lt;h4&gt;Performance trade-off #3: hijacking event handler management&lt;/h4&gt;

&lt;p&gt;Given that synthesising the Event object is so costly and you end up doing it multiple times for a single event if you have more than one handler for that event, event managers have a trick up their sleeve to alleviate the pain. NWMatcher, jQuery and others don&#39;t directly attach your event handler to the DOM, instead, they attach a single internal handler that is responsible for triggering any number of handlers you register for a given event on a particular element.&lt;/p&gt;
&lt;p&gt;Consider the following code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;#el&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code would work in Bean and jQuery, the difference is that Bean v0.4 and prior adds 100 handlers directly to the DOM element to listen to that event while jQuery adds just one and iterates over the others when the event is triggered. The new version of Bean does the same.&lt;/p&gt;
&lt;p&gt;The reason this helps with performance is that we don&#39;t have to make a new Event object each time the event is triggered, we can reuse the same one across handlers.&lt;/p&gt;
&lt;p&gt;There&#39;s another major advantage to this approach, and perhaps a more important reason to implement an event manager this way: you get to hide some odd browser quirks. As &lt;a href=&quot;https://twitter.com/kitcambridge&quot;&gt;Kit Cambridge&lt;/a&gt; &lt;a href=&quot;https://twitter.com/kitcambridge/status/230775465542049792&quot;&gt;noted recently&lt;/a&gt;, older versions of Internet Explorer generally fire their handlers in LIFO order, yet W3C specs for &lt;code&gt;addEventListener()&lt;/code&gt; specifies FIFO order! In fact, it&#39;s even worse because the &lt;a href=&quot;https://twitter.com/kitcambridge/status/230775716239794176&quot;&gt;Microsoft documentation&lt;/a&gt; says that they may actually be triggered in &lt;i&gt;random order&lt;/i&gt;! But, if you only have a single real handler then you get complete control over order.&lt;/p&gt;
&lt;p&gt;The benefits go further though, we get to implement some nice features that are completely missing from older browsers and even some current browsers. The most notable is &lt;code&gt;Event.stopImmediatePropagation()&lt;/code&gt;. This is a method that was introduced with DOM Level 3, so it&#39;s missing from IE8 and below, but surprisingly it&#39;s also missing from the current version of Opera! Perhaps the pressure is off because jQuery implements it as part of their relatively complete DOM Level 3 Events implementation using this single-DOM-handler method.&lt;/p&gt;
&lt;h5&gt;&lt;code&gt;stopImmediatePropagation()&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;Bean has included a custom &lt;code&gt;Event.stop()&lt;/code&gt; method since v0.4, it&#39;s modelled off the &lt;a href=&quot;http://api.prototypejs.org/dom/Event/stop/&quot;&gt;same method&lt;/a&gt; in Prototype. It&#39;s also found in MooTools and and some other libraries. This method combines both &lt;code&gt;Event.stopPropagation()&lt;/code&gt; and &lt;code&gt;Event.preventDefault()&lt;/code&gt; in a short and sweet little utility method. But, &lt;i&gt;&quot;stop&quot;&lt;/i&gt; is slightly misleading, because you can stop the default behaviour of the browser and you can stop the event bubbling up the DOM, but you &lt;b&gt;can&#39;t stop other event handlers for this event &lt;i&gt;at this element&lt;/i&gt; from firing&lt;/b&gt;. That&#39;s where the new &lt;code&gt;Event.stopImmediatePropagation()&lt;/code&gt; comes in: it halts the processing of the event handler list for the current event at the current element (i.e. it can be used at any point in the bubbling process and it&#39;ll stop processing just the handlers at the element it was called at).&lt;/p&gt;
&lt;p&gt;If an event manager takes the single-DOM-handler approach, it has to care about &lt;code&gt;stopImmediatePropagation()&lt;/code&gt; because it no longer has an affect in the browser since the browser only has a single handler to worry about. But, you also get the benefit that it now applies to any browser the event manager supports.&lt;/p&gt;
&lt;p&gt;At the time of writing this article I haven&#39;t decided whether I think that &lt;code&gt;Event.stop()&lt;/code&gt; should also bundle &lt;code&gt;Event.stopImmediatePropagation()&lt;/code&gt;. I&#39;m leaning towards including it because &lt;i&gt;&quot;stop&quot;&lt;/i&gt; should mean &lt;b&gt;stop&lt;/b&gt; and the combination of all three methods would certainly do this.&lt;/p&gt;
&lt;h3&gt;List of changes for Bean 1.0&lt;/h3&gt;

&lt;p&gt;&lt;b&gt;&lt;code&gt;on()&lt;/code&gt; argument ordering&lt;/b&gt;: the new signature is now &lt;code&gt;.on(events[, selector], handlerFn)&lt;/code&gt;, which will work on both Bean as a standalone library and when bundled in Ender. In Ender, the following aliases also pass through &lt;code&gt;on()&lt;/code&gt; so the same arguments work: &lt;code&gt;addListener()&lt;/code&gt;, &lt;code&gt;bind()&lt;/code&gt;, &lt;code&gt;listen()&lt;/code&gt; and &lt;code&gt;one()&lt;/code&gt; (which of course will only trigger once). Plus all the specific shortcuts such as &lt;code&gt;click()&lt;/code&gt;, &lt;code&gt;keyup()&lt;/code&gt; etc. although these methods have the first argument hardwired.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;add()&lt;/code&gt; is left intact with the same argument ordering for standalone Bean and &lt;code&gt;delegate()&lt;/code&gt; has the same signature, the same as jQuery&#39;s equivalent.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;code&gt;off()&lt;/code&gt; is the new &lt;code&gt;remove()&lt;/code&gt;&lt;/b&gt;: although &lt;code&gt;remove()&lt;/code&gt; is still available in standalone Bean.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Bean attaches a single handler to the DOM for each event type on each element&lt;/b&gt;: as outlined above, Bean will iterate over all handlers for each triggered and (mostly) reuse the same Event object for each call.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;code&gt;Event.stopImmediatePropagation()&lt;/code&gt;:&lt;/b&gt; is available across all supported browsers, it will stop the processing of all handlers for the current event at the current element (i.e. the event will still bubble).&lt;/p&gt;
&lt;p&gt;&lt;b&gt;The selector engine argument to &lt;code&gt;add()&lt;/code&gt; is now completely removed&lt;/b&gt;: you used to have to pass a selector engine in as the last argument for delegated events. Now you must set it once at start-up with &lt;code&gt;setSelectorEngine()&lt;/code&gt;. This is automatically taken care of for you in an Ender build.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;A duplicate-handler check is no longer performed when you &lt;i&gt;add&lt;/i&gt;&lt;/b&gt;: performance testing showed that this was a massive slow-down and is simply not something that Bean should be responsible for. If you want to add the same handler twice then that&#39;s your business and responsibility.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Namespace matching for event &lt;code&gt;fire()&lt;/code&gt;ing now matches namespaces using an &lt;i&gt;and&lt;/i&gt; instead of an &lt;code&gt;or&lt;/code&gt;:&lt;/b&gt; so for example, firing namespaces &#39;a.b&#39; will fire any event with &lt;i&gt;both&lt;/i&gt; &#39;a&#39; and &#39;b&#39; rather than &lt;i&gt;either&lt;/i&gt; &#39;a&#39; or &#39;b&#39;. This is compatible with jQuery and is arguably a much more sensible and helpful way to deal with namespaces. You can find some discussion on this &lt;a href=&quot;https://github.com/fat/bean/pull/68&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Lots of internal improvements for speed, code size, etc.&lt;/b&gt;.&lt;/p&gt;
&lt;h3&gt;Deconstructing performance (benchmarks)&lt;/h3&gt;

&lt;p&gt;We&#39;ve had a benchmark suite since v0.4 to help measure the impact of changes, so I&#39;ve extended it to help compare some versions of Bean. The benchmarks use &lt;a href=&quot;http://benchmarkjs.com/&quot;&gt;benchmark.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are 3 versions of Bean included here:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;Bean 0.4&lt;/b&gt;: The current release of Bean, specifically version 0.4.11-1, source &lt;a href=&quot;https://github.com/fat/bean/tree/3ded4e905ef89a344729953be69e438583968679&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Bean 0.5a&lt;/b&gt;: An unreleased version of Bean in the 0.5-wip branch. Specifically most of the changes listed above are included here &lt;i&gt;except&lt;/i&gt; for the single-DOM-handler change. This is here to assess the impact of this change and deciding whether it&#39;s a worthwhile &quot;improvement&quot;. Source &lt;a href=&quot;https://github.com/fat/bean/tree/989f33520c1ef6cb07e138a4176b14f3184adef6&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Bean 1.0a&lt;/b&gt;: The main difference between this and 0.5a is the single-DOM-handler change. Source &lt;a href=&quot;https://github.com/fat/bean/tree/4bcf05ffe12cfcf0bf8744d2ebc1627c554eed92&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&#39;ll have some notes about my own analysis of these numbers below but first I should mention that these benchmarks are not particularly helpful in showing how the libraries perform with real use patterns. I consider them to mainly be proxies for identifying the performance of particular behaviours within the libraries. You&#39;ll note that there are a lot of tests for &lt;code&gt;add()&lt;/code&gt; / &lt;code&gt;on()&lt;/code&gt;, that&#39;s simply because that&#39;s the easiest to test reliably and also because I haven&#39;t been bothered coming up useful with tests for other things. It&#39;s very difficult to test the actual event triggering which would be the most interesting bit, although the &lt;code&gt;fire()&lt;/code&gt; tests give us a little bit of insight. The tests at the bottom try to capture a full add/fire/remove cycle, but even this isn&#39;t even particularly helpful. These benchmarks can be found in the Bean repo so if you want to tinker then feel free, I&#39;d love to have additional input.&lt;/p&gt;
&lt;p&gt;So, more so than most benchmarks, take these with a very large grain of salt or two!&lt;/p&gt;
&lt;p&gt;&lt;i&gt;(The numbers are ops/sec, so higher is better in all cases)&lt;/i&gt;&lt;/p&gt;
&lt;style&gt;
table.results { font-family: &quot;Lucida Grande&quot;, &quot;Lucida Sans Unicode&quot;, Verdana, sans-serif; margin-bottom: 1.4em; }
table.results th:first-child, table.results td { text-align: right; }
table.results tbody tr:nth-child(2n+1) { background-color: rgba(0,0,0,0.075); }
table.results tr &gt; * { padding: 0 3px; }
&lt;/style&gt;

&lt;h4&gt;Chrome&lt;/h4&gt;

&lt;table class=&quot;results&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;&lt;th&gt;&lt;/th&gt;
    &lt;th&gt;Bean 0.4&lt;/th&gt;
    &lt;th&gt;Bean 0.5a&lt;/th&gt;
    &lt;th&gt;Bean 1.0a&lt;/th&gt;
    &lt;th&gt;NWEvents&lt;/th&gt;
    &lt;th&gt;jQuery&lt;/th&gt;
  &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
  &lt;tr&gt;&lt;th&gt;add(element, event, fn)&lt;/th&gt;&lt;td&gt;25,760&lt;/td&gt;&lt;td&gt;66,580&lt;/td&gt;&lt;td&gt;185,147&lt;/td&gt;&lt;td&gt;18,133&lt;/td&gt;&lt;td&gt;142,161&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;add(unique element, event, fn)&lt;/th&gt;&lt;td&gt;33,024&lt;/td&gt;&lt;td&gt;99,208&lt;/td&gt;&lt;td&gt;36,481&lt;/td&gt;&lt;td&gt;18,634&lt;/td&gt;&lt;td&gt;50,554&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;add(element, custom, fn)&lt;/th&gt;&lt;td&gt;28,728&lt;/td&gt;&lt;td&gt;56,607&lt;/td&gt;&lt;td&gt;165,189&lt;/td&gt;&lt;td&gt;11,248&lt;/td&gt;&lt;td&gt;119,593&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;add(unique element, custom, fn)&lt;/th&gt;&lt;td&gt;36,150&lt;/td&gt;&lt;td&gt;78,260&lt;/td&gt;&lt;td&gt;34,308&lt;/td&gt;&lt;td&gt;24,409&lt;/td&gt;&lt;td&gt;44,761&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;add(element, event.namespace, fn)&lt;/th&gt;&lt;td&gt;30,082&lt;/td&gt;&lt;td&gt;64,435&lt;/td&gt;&lt;td&gt;189,468&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;136,486&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;add(unique element, event.namespace, fn)&lt;/th&gt;&lt;td&gt;33,702&lt;/td&gt;&lt;td&gt;101,915&lt;/td&gt;&lt;td&gt;34,678&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;33,637&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;add(element, selector, event, fn)&lt;/th&gt;&lt;td&gt;25,180&lt;/td&gt;&lt;td&gt;42,274&lt;/td&gt;&lt;td&gt;119,339&lt;/td&gt;&lt;td&gt;2,909&lt;/td&gt;&lt;td&gt;76,171&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;add(unique element, selector, event, fn)&lt;/th&gt;&lt;td&gt;27,328&lt;/td&gt;&lt;td&gt;91,156&lt;/td&gt;&lt;td&gt;30,308&lt;/td&gt;&lt;td&gt;1,069&lt;/td&gt;&lt;td&gt;35,696&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;add({})&lt;/th&gt;&lt;td&gt;15,594&lt;/td&gt;&lt;td&gt;27,312&lt;/td&gt;&lt;td&gt;59,434&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;fire(event)&lt;/th&gt;&lt;td&gt;576&lt;/td&gt;&lt;td&gt;492&lt;/td&gt;&lt;td&gt;6,860&lt;/td&gt;&lt;td&gt;9,797&lt;/td&gt;&lt;td&gt;21,821&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;fire(custom)&lt;/th&gt;&lt;td&gt;165,222&lt;/td&gt;&lt;td&gt;164,418&lt;/td&gt;&lt;td&gt;161,243&lt;/td&gt;&lt;td&gt;240,961&lt;/td&gt;&lt;td&gt;86,291&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;fire(namespace)&lt;/th&gt;&lt;td&gt;29,742&lt;/td&gt;&lt;td&gt;28,721&lt;/td&gt;&lt;td&gt;27,666&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;element add / click / remove&lt;/th&gt;&lt;td&gt;18,579&lt;/td&gt;&lt;td&gt;17,425&lt;/td&gt;&lt;td&gt;14,760&lt;/td&gt;&lt;td&gt;1,748&lt;/td&gt;&lt;td&gt;2,775&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;element add / fire / remove&lt;/th&gt;&lt;td&gt;31,230&lt;/td&gt;&lt;td&gt;28,344&lt;/td&gt;&lt;td&gt;15,802&lt;/td&gt;&lt;td&gt;1,127&lt;/td&gt;&lt;td&gt;2,763&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;object add / fire / remove&lt;/th&gt;&lt;td&gt;58,927&lt;/td&gt;&lt;td&gt;53,139&lt;/td&gt;&lt;td&gt;49,549&lt;/td&gt;&lt;td&gt;107,700&lt;/td&gt;&lt;td&gt;18,619&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4&gt;Firefox&lt;/h4&gt;

&lt;table class=&quot;results&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;&lt;th&gt;&lt;/th&gt;
    &lt;th&gt;Bean 0.4&lt;/th&gt;
    &lt;th&gt;Bean 0.5a&lt;/th&gt;
    &lt;th&gt;Bean 1.0a&lt;/th&gt;
    &lt;th&gt;NWEvents&lt;/th&gt;
    &lt;th&gt;jQuery&lt;/th&gt;
  &lt;/tr&gt;&lt;/thead&gt;
  &lt;tbody&gt;
  &lt;tr&gt;&lt;th&gt;add(element, event, fn)&lt;/th&gt;&lt;td&gt;20,404&lt;/td&gt;&lt;td&gt;45,030&lt;/td&gt;&lt;td&gt;100,546&lt;/td&gt;&lt;td&gt;13,826&lt;/td&gt;&lt;td&gt;63,159&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add(unique element, event, fn)&lt;/th&gt;&lt;td&gt;16,708&lt;/td&gt;&lt;td&gt;67,417&lt;/td&gt;&lt;td&gt;19,625&lt;/td&gt;&lt;td&gt;16,810&lt;/td&gt;&lt;td&gt;29,130&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add(element, custom, fn)&lt;/th&gt;&lt;td&gt;16,691&lt;/td&gt;&lt;td&gt;42,601&lt;/td&gt;&lt;td&gt;134,535&lt;/td&gt;&lt;td&gt;13,368&lt;/td&gt;&lt;td&gt;59,774&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add(unique element, custom, fn)&lt;/th&gt;&lt;td&gt;24,159&lt;/td&gt;&lt;td&gt;55,312&lt;/td&gt;&lt;td&gt;21,235&lt;/td&gt;&lt;td&gt;13,475&lt;/td&gt;&lt;td&gt;27,877&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add(element, event.namespace, fn)&lt;/th&gt;&lt;td&gt;17,414&lt;/td&gt;&lt;td&gt;53,639&lt;/td&gt;&lt;td&gt;101,427&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;55,321&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add(unique element, event.namespace, fn)&lt;/th&gt;&lt;td&gt;23,735&lt;/td&gt;&lt;td&gt;59,751&lt;/td&gt;&lt;td&gt;22,034&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;27,576&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add(element, selector, event, fn)&lt;/th&gt;&lt;td&gt;18,766&lt;/td&gt;&lt;td&gt;54,571&lt;/td&gt;&lt;td&gt;92,602&lt;/td&gt;&lt;td&gt;2,317&lt;/td&gt;&lt;td&gt;36,753&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add(unique element, selector, event, fn)&lt;/th&gt;&lt;td&gt;22,094&lt;/td&gt;&lt;td&gt;56,026&lt;/td&gt;&lt;td&gt;16,705&lt;/td&gt;&lt;td&gt;964&lt;/td&gt;&lt;td&gt;22,102&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add({})&lt;/th&gt;&lt;td&gt;9,126&lt;/td&gt;&lt;td&gt;17,104&lt;/td&gt;&lt;td&gt;32,093&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;fire(event)&lt;/th&gt;&lt;td&gt;260&lt;/td&gt;&lt;td&gt;266&lt;/td&gt;&lt;td&gt;3,391&lt;/td&gt;&lt;td&gt;3,120&lt;/td&gt;&lt;td&gt;11,154&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;fire(custom)&lt;/th&gt;&lt;td&gt;61,845&lt;/td&gt;&lt;td&gt;59,950&lt;/td&gt;&lt;td&gt;61,742&lt;/td&gt;&lt;td&gt;93,033&lt;/td&gt;&lt;td&gt;45,978&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;fire(namespace)&lt;/th&gt;&lt;td&gt;28,910&lt;/td&gt;&lt;td&gt;27,379&lt;/td&gt;&lt;td&gt;23,127&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;element add / click / remove&lt;/th&gt;&lt;td&gt;7,644&lt;/td&gt;&lt;td&gt;6,220&lt;/td&gt;&lt;td&gt;6,005&lt;/td&gt;&lt;td&gt;1,284&lt;/td&gt;&lt;td&gt;4,845&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;element add / fire / remove&lt;/th&gt;&lt;td&gt;11,288&lt;/td&gt;&lt;td&gt;10,954&lt;/td&gt;&lt;td&gt;7,458&lt;/td&gt;&lt;td&gt;788&lt;/td&gt;&lt;td&gt;9,115&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;object add / fire / remove&lt;/th&gt;&lt;td&gt;45,165&lt;/td&gt;&lt;td&gt;37,934&lt;/td&gt;&lt;td&gt;37,306&lt;/td&gt;&lt;td&gt;38,097&lt;/td&gt;&lt;td&gt;12,490&lt;/td&gt;
  &lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4&gt;IE9&lt;/h4&gt;

&lt;table class=&quot;results&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;&lt;th&gt;&lt;/th&gt;
    &lt;th&gt;Bean 0.4&lt;/th&gt;
    &lt;th&gt;Bean 0.5a&lt;/th&gt;
    &lt;th&gt;Bean 1.0a&lt;/th&gt;
    &lt;th&gt;NWEvents&lt;/th&gt;
    &lt;th&gt;jQuery&lt;/th&gt;
  &lt;/tr&gt;&lt;/thead&gt;
  &lt;tbody&gt;
  &lt;tr&gt;&lt;th&gt;add(element, event, fn)&lt;/th&gt;&lt;td&gt;925&lt;/td&gt;&lt;td&gt;944&lt;/td&gt;&lt;td&gt;209,714&lt;/td&gt;&lt;td&gt;4,321&lt;/td&gt;&lt;td&gt;117,343&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add(unique element, event, fn)&lt;/th&gt;&lt;td&gt;13,559&lt;/td&gt;&lt;td&gt;113,944&lt;/td&gt;&lt;td&gt;10,568&lt;/td&gt;&lt;td&gt;3,012&lt;/td&gt;&lt;td&gt;58,929&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add(element, custom, fn)&lt;/th&gt;&lt;td&gt;946&lt;/td&gt;&lt;td&gt;1,004&lt;/td&gt;&lt;td&gt;219,631&lt;/td&gt;&lt;td&gt;4,329&lt;/td&gt;&lt;td&gt;128,570&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add(unique element, custom, fn)&lt;/th&gt;&lt;td&gt;7,557&lt;/td&gt;&lt;td&gt;123,288&lt;/td&gt;&lt;td&gt;12,620&lt;/td&gt;&lt;td&gt;3,191&lt;/td&gt;&lt;td&gt;32,610&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add(element, event.namespace, fn)&lt;/th&gt;&lt;td&gt;880&lt;/td&gt;&lt;td&gt;826&lt;/td&gt;&lt;td&gt;87,932&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;53,737&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add(unique element, event.namespace, fn)&lt;/th&gt;&lt;td&gt;11,823&lt;/td&gt;&lt;td&gt;103,977&lt;/td&gt;&lt;td&gt;12,001&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;28,053&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add(element, selector, event, fn)&lt;/th&gt;&lt;td&gt;655&lt;/td&gt;&lt;td&gt;802&lt;/td&gt;&lt;td&gt;57,619&lt;/td&gt;&lt;td&gt;382&lt;/td&gt;&lt;td&gt;21,159&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add(unique element, selector, event, fn)&lt;/th&gt;&lt;td&gt;11,649&lt;/td&gt;&lt;td&gt;96,597&lt;/td&gt;&lt;td&gt;11,404&lt;/td&gt;&lt;td&gt;139&lt;/td&gt;&lt;td&gt;24,756&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add({})&lt;/th&gt;&lt;td&gt;53&lt;/td&gt;&lt;td&gt;49&lt;/td&gt;&lt;td&gt;17,735&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;fire(event)&lt;/th&gt;&lt;td&gt;290,543&lt;/td&gt;&lt;td&gt;286,385&lt;/td&gt;&lt;td&gt;293,547&lt;/td&gt;&lt;td&gt;71,396&lt;/td&gt;&lt;td&gt;22,794&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;fire(custom)&lt;/th&gt;&lt;td&gt;229,241&lt;/td&gt;&lt;td&gt;223,189&lt;/td&gt;&lt;td&gt;216,943&lt;/td&gt;&lt;td&gt;78,395&lt;/td&gt;&lt;td&gt;23,081&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;fire(namespace)&lt;/th&gt;&lt;td&gt;17,507&lt;/td&gt;&lt;td&gt;11,848&lt;/td&gt;&lt;td&gt;16,018&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;element add / click / remove&lt;/th&gt;&lt;td&gt;10,228&lt;/td&gt;&lt;td&gt;9,697&lt;/td&gt;&lt;td&gt;9,260&lt;/td&gt;&lt;td&gt;478&lt;/td&gt;&lt;td&gt;8,345&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;element add / fire / remove&lt;/th&gt;&lt;td&gt;13,062&lt;/td&gt;&lt;td&gt;10,587&lt;/td&gt;&lt;td&gt;18,577&lt;/td&gt;&lt;td&gt;155&lt;/td&gt;&lt;td&gt;6,094&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;object add / fire / remove&lt;/th&gt;&lt;td&gt;30,924&lt;/td&gt;&lt;td&gt;29,096&lt;/td&gt;&lt;td&gt;28,904&lt;/td&gt;&lt;td&gt;39,761&lt;/td&gt;&lt;td&gt;7,634&lt;/td&gt;
  &lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;First, let me say that the IE results don&#39;t make a whole lot of sense so I&#39;m going to suggest that the Chrome and Firefox benchmarks are the best indicators of general performance characteristics across browsers. The IE results have similar patterns to the others but there&#39;s way too much strangeness in there for me to take them seriously! IE8 has difficulty running all the benchmarks without locking up and I don&#39;t care enough to persevere there so I&#39;m ignoring that too. Safari crashes and Opera has very similar results to Firefox and Chrome.&lt;/p&gt;
&lt;p&gt;&lt;i&gt;(Just to clarify, it&#39;s only the benchmarks that have trouble running in older versions of IE, the Bean test suite still runs on IE6 and above and has been beefed up even more in the 0.5-wip branch.)&lt;/i&gt;&lt;/p&gt;
&lt;h4&gt;Some observations&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;The gains for &lt;code&gt;add()&lt;/code&gt; from Bean v0.4 to v0.5a are largely from removing the &lt;b&gt;duplicate handler check&lt;/b&gt;.&lt;/li&gt;
  &lt;li&gt;The reason for the duplicate tests for &lt;b&gt;&lt;i&gt;&quot;element&quot;&lt;/i&gt; vs &lt;i&gt;&quot;unique element&quot;&lt;/i&gt; in the &lt;code&gt;add()&lt;/code&gt; benchmarks&lt;/b&gt; is to demonstrate the costs and benefits involved the single-DOM-handler model. You can see that the numbers switch between the non-unique / unique tests for Bean v0.5a and v1.0a. Also jQuery suffers significantly when you feed it unique elements because it has to add DOM handlers each time.&lt;/li&gt;
  &lt;li&gt;The poor performance for Bean v0.4 and v0.5a in &lt;b&gt;&lt;code&gt;fire()&lt;/code&gt; benchmarks&lt;/b&gt; is mostly attributed to &lt;b&gt;Event object synthesising&lt;/b&gt;, rather than the speed of the browser-native handler list management. This is important because firing native-style events (e.g. &lt;code&gt;fire(&#39;click&#39;)&lt;/code&gt;, which is what we&#39;re testing here) is not a common activity but we&#39;re having to synthesize the event object each time a handler is triggered. So, this is where Bean finds the most &lt;i&gt;win&lt;/i&gt; in switching to a single-DOM-handler model.&lt;/li&gt;
  &lt;li&gt;Bean loses performance between v0.5a and v1.0a in the unique element &lt;code&gt;add()&lt;/code&gt; benchmarks, this can mostly be explained by the &lt;b&gt;overhead of managing the root handler that it needs to attach to the DOM&lt;/b&gt;. The handler is stored in the internal registry and each time you &lt;code&gt;add()&lt;/code&gt; it needs to work out if you already have a root handler attached to the DOM or not for the given event / element. jQuery gets to take some shortcuts by polluting the DOM and handler functions with &lt;code&gt;guid&lt;/code&gt; properties. However, the numbers suggest to me that there is some additional performance that could be squeezed out of Bean in this area.&lt;/li&gt;
  &lt;li&gt;Bean is fairly liberal with its &lt;b&gt;whitelist of properties&lt;/b&gt; to copy from the original Event object, jQuery is a bit more restrictive with its similar system, this may slow Bean down very slightly.&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Delegated events&lt;/b&gt; are not represented well here, but the results would be very interesting because of the additional work required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;File size&lt;/h3&gt;

&lt;p&gt;A lot of users of Bean are file-size-sensitive, so it&#39;s important to highlight that there are costs to these performance improvements. Minified, gzipped, the sizes for each of these versions of Bean are:&lt;/p&gt;
&lt;table class=&quot;results&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;th&gt;Bean 0.4&lt;/th&gt;&lt;td&gt;3870 bytes&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;th&gt;Bean 0.5a&lt;/th&gt;&lt;td&gt;3959 bytes&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;th&gt;Bean 1.0a&lt;/th&gt;&lt;td&gt;4176 bytes&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;I&#39;ve tried &lt;i&gt;really&lt;/i&gt; hard to keep the size under 4kb but the additional overhead in managing the single-DOM-handler is too much to achieve that, even though I&#39;ve managed to shave many precious bytes off in other areas of the code in the process (which unfortunately can&#39;t be seen in these numbers!).&lt;/p&gt;
&lt;p&gt;We&#39;re still well under the minified, gzipped size of the jQuery events module by itself, even though we implement very similar functionality and jQuery gets to leverage lots of internal sugar not contained within the events module.&lt;/p&gt;
&lt;h3&gt;Request for feedback&lt;/h3&gt;

&lt;p&gt;After all that, what I really want is feedback! At this point I&#39;m happy to release a proper version 1.0, I think it&#39;s major enough to warrant a jump past 0.5. I&#39;d really like to hear feedback from people that have doubts that the changes are worth it, particularly the single-DOM-handler change.&lt;/p&gt;
&lt;h3&gt;Using the 1.0 pre-release&lt;/h3&gt;

&lt;p&gt;I&#39;ve started using it in production and am very happy with the results so far, I&#39;d love to have feedback from anyone else who wants to give it a spin.&lt;/p&gt;
&lt;p&gt;The new version of Bean is in npm with the tag &lt;i&gt;dev&lt;/i&gt; so you can include it in your Ender builds by referring to &lt;i&gt;bean@dev&lt;/i&gt; as the package name.&lt;/p&gt;
&lt;p&gt;For stand-alone, you can grab it from the &lt;a href=&quot;https://github.com/fat/bean/tree/0.5-wip&quot;&gt;0.5-wip branch&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;p&gt;Thanks for getting this far!&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>mod_geoip2_xff update</title>
      <link href="http://andreysidorov.com/2012/07/mod_geoip2_xff-update.html" />
      <updated>2012-07-06T02:47:17.000Z</updated>
      <id>http://andreysidorov.com/2012/07/mod_geoip2_xff-update.html</id>
      <content type="html">
        &lt;p&gt;Thanks to a contribution from &lt;a href=&quot;https://plus.google.com/105599514712357912650/posts&quot;&gt;Kevin Gaudin&lt;/a&gt;, I have a new release of my &lt;a href=&quot;http://www.maxmind.com/app/mod_geoip&quot;&gt;mod_geoip2&lt;/a&gt; fork. (The history starts &lt;a href=&quot;http://rod.vagg.org/2012/04/a-mod_geoip2-that-properly-handles-x-forwarded-for/&quot;&gt;here&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;You can find the source here: &lt;a href=&quot;https://github.com/rvagg/mod_geoip2_xff&quot;&gt;&lt;a href=&quot;https://github.com/rvagg/mod_geoip2_xff&quot;&gt;https://github.com/rvagg/mod_geoip2_xff&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kevin&#39;s addition provides a fall-back to the standard remote IP address of the client if no public IP address is found in the &lt;em&gt;X-Forwarded-For&lt;/em&gt; header. Previously, my implementation just fell back to the default mod_geoip2 behaviour of just taking the first IP address in the &lt;em&gt;X-Forwarded-For&lt;/em&gt; header, or the last if you set &lt;em&gt;GeoIPUseLastXForwardedForIP&lt;/em&gt; in your config.&lt;/p&gt;
&lt;p&gt;I also took the opportunity to clean things up a little and introduce a config option to turn on the special &lt;em&gt;X-Forwarded-For&lt;/em&gt; handling. You now have to set &lt;strong&gt;GeoIPUseLeftPublicXForwardedForIP&lt;/strong&gt; to &lt;strong&gt;On&lt;/strong&gt; to activate it.&lt;/p&gt;
&lt;p&gt;Thanks to Kevin, and additional contributions are welcome!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update July 7th 2012&lt;/strong&gt;: Since I was in C-mode, I went ahead and implemented something I&#39;ve tried to get working in the past: &lt;strong&gt;hostname lookups on the X-Forwarded-For host!&lt;/strong&gt; I got intimate with APR and worked out how to use Apache to do the resolution so there isn&#39;t the lengthy timeout of raw syscalls. If you set &lt;strong&gt;GeoIPEnableHostnameLookups&lt;/strong&gt; to &lt;strong&gt;On&lt;/strong&gt;, you&#39;ll get a &lt;strong&gt;GEOIP_HOST&lt;/strong&gt; environment variable to use.&lt;/p&gt;
&lt;p&gt;I&#39;ve also decided to start making tarballs available off GitHub for your convenience: &lt;a href=&quot;https://github.com/rvagg/mod_geoip2_xff/downloads&quot;&gt;&lt;a href=&quot;https://github.com/rvagg/mod_geoip2_xff/downloads&quot;&gt;https://github.com/rvagg/mod_geoip2_xff/downloads&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>Data URI + SVG</title>
      <link href="http://andreysidorov.com/2012/05/data-uri-svg.html" />
      <updated>2012-05-23T05:16:22.000Z</updated>
      <id>http://andreysidorov.com/2012/05/data-uri-svg.html</id>
      <content type="html">
        &lt;p&gt;Data URIs are great when you want to serve small resources that there&#39;s no point serving up in a combined sprite. Consider &lt;a href=&quot;http://microjs.com&quot;&gt;microjs.com&lt;/a&gt; which serves up an HTML file plus a single JavaScript file containing the latest data used to build the site. The build logic is in an embedded script, the CSS is also embedded, so it&#39;s pretty lean considering what you see and the amount of data displayed. But, notice the 3 icons for each project, 2 GitHub icons and a Twitter icon. They are PNG images, combined as a sprite but to avoid an additional HTTP request to fetch them they are simply embedded in the CSS which is embedded on the page:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;.title&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.stat&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;background-image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iVBORw0KGgoAAAANSUhE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Easy and quick and fairly well supported across browsers.&lt;/p&gt;
&lt;p&gt;But Data URIs can do so much more, including embed SVG!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;url(&quot;data:image/svg+xml,&lt;span class=&quot;nt&quot;&gt;&lt;svg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;viewBox=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;0 0 40 40&#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;25&#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;25&#39;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;http://www.w3.org/2000/svg&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&gt;&lt;path&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fill=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;rgb(91, 183, 91)&#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;d=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;M2.379,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;14.729L5.208,11.899L12.958,19.648L25.877,6.733L28.707,9.561L12.958,25.308Z&#39;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;/&gt;&lt;/svg&gt;&lt;/span&gt;&quot;)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above will produce a 25px square image but the SVG is drawn in a 40x40 coordinate box, because I&#39;m using a &lt;a href=&quot;http://raphaeljs.com/icons/&quot;&gt;Raphaël Icon&lt;/a&gt; paths (you can try it yourself by replacing the &lt;code&gt;d=&#39;&#39;&lt;/code&gt; content with the path data you get when you click on any of the icons on the &lt;a href=&quot;http://raphaeljs.com/icons/&quot;&gt;Raphaël Icons&lt;/a&gt; page.)&lt;/p&gt;
&lt;p&gt;SVG of course gives you perfectly scalable graphics, embedding in a Data URI in your CSS lets you use them in the same way that you use other CSS images, minus the need to fetch them via an additional HTTP request.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What&#39;s the catch?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It&#39;s the web, of course there&#39;s a catch, and of course it involves Internet Explorer!&lt;/p&gt;
&lt;p&gt;For a start you don&#39;t get SVG support in IE8 and below, which is a bit of a problem right now because IE8 is still very much with us due to the fact that IE9 isn&#39;t available for Windows XP users. But there&#39;s more than that. IE adheres to the &lt;a href=&quot;http://www.ietf.org/rfc/rfc2397.txt&quot;&gt;spec&lt;/a&gt; more strongly than other browsers in that there are 2 types of encoding for Data URIs, &lt;em&gt;base64&lt;/em&gt; and &lt;em&gt;non-base64&lt;/em&gt;. If you leave the &lt;code&gt;;base64&lt;/code&gt; off your string then most browsers let you get away with anything that doesn&#39;t conflict with standard CSS, so basically don&#39;t use &lt;code&gt;&quot;&lt;/code&gt;, or if you do, escape them with simple &lt;code&gt;\&quot;&lt;/code&gt;. What the Data URI spec says is:&lt;/p&gt;
&lt;p&gt;&lt;blockquote&gt;...the data (as a sequence of octets) is represented using ASCII encoding for octets inside the range of safe URL characters and using the standard %xx hex encoding of URLs for octets outside that range.&lt;/blockquote&gt;
And IE doesn&#39;t let you have it any other way. So you either encode your SVG into Base64 or escape it with &lt;code&gt;%xx&lt;/code&gt;&#39;s, which kind of loses some of the elegance of SVG in CSS. But at least you&#39;ll get IE9+ support.&lt;/p&gt;
&lt;p&gt;So here&#39;s some examples to &lt;a href=&quot;http://jsfiddle.net/rvagg/exULa/&quot;&gt;fiddle&lt;/a&gt; with. Click through to the CSS tab to see the gory details. The first icon is Base64 encoded, the second icon is URL escaped (&lt;code&gt;%xx&lt;/code&gt;), the rest are just plain SVG, so you&#39;ll get different results viewing in IE9 vs the rest.&lt;/p&gt;
&lt;p&gt;SVG in Data URIs is an elegant solution (and a bit of fun) but only really useful at the moment if you don&#39;t need to support IE8 and below.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 17th Sept 2012&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Below in the comments, Ben reports on his (much more rigorous) research into browser support; refer to that if you&#39;re serious about using SVG in Data URIs. An interesting result of his work comes from the &lt;a href=&quot;https://code.google.com/p/chromium/issues/detail?id=137277&quot;&gt;issue&lt;/a&gt; he filed with Chromium (I don&#39;t know if this is a generic WebKit thing or not but you could easily test if you&#39;re interested). It turns out that Chromium/WebKit requires Base64 Data URIs to be multiples of 4 characters, so you just need to pad with &lt;code&gt;==&lt;/code&gt;.&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>A mod_geoip2 that properly handles X-Forwarded-For</title>
      <link href="http://andreysidorov.com/2012/04/a-mod_geoip2-that-properly-handles-x-forwarded-for.html" />
      <updated>2012-04-22T04:55:42.000Z</updated>
      <id>http://andreysidorov.com/2012/04/a-mod_geoip2-that-properly-handles-x-forwarded-for.html</id>
      <content type="html">
        &lt;p&gt;This is just a short follow-up to my original post on&lt;em&gt; &lt;a title=&quot;Wrangling the X-Forwarded-For Header&quot; href=&quot;http://rod.vagg.org/2011/07/wrangling-the-x-forwarded-for-header/&quot;&gt;Wrangling the X-Forwarded-For Header&lt;/a&gt;&lt;/em&gt; where I promised that one of the things I would follow up with was how to get MaxMind&#39;s mod_geoip2 to handle the X-Forwarded-For according to the rule:&lt;/p&gt;
&lt;p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;&lt;em&gt;Always use the leftmost non-private address&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
Well, since it&#39;s turning out to be such a popular post I thought I&#39;d better get it done to help anyone else out that&#39;s searching around for solutions. So, I&#39;ve put up the code on my GitHub account here:&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/rvagg/mod_geoip2_xff&quot;&gt;&lt;a href=&quot;https://github.com/rvagg/mod_geoip2_xff&quot;&gt;https://github.com/rvagg/mod_geoip2_xff&lt;/a&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
I&#39;m maintaining a &lt;em&gt;maxmind&lt;/em&gt; branch that contains the original code from MaxMind and the &lt;em&gt;master&lt;/em&gt; contains my changes, so you can see a nice &lt;a href=&quot;https://github.com/rvagg/mod_geoip2_xff/compare/maxmind...master&quot;&gt;diff&lt;/a&gt; of what I&#39;ve done.&lt;/p&gt;
&lt;p&gt;I have to warn that I haven&#39;t done any serious C programming for more than 15 years or so, my code probably isn&#39;t fantastic, and I&#39;m open to outside contributions from anyone with suggestions. The approach I&#39;ve taken is to embed the regexes of my previous post into the module and walk through the IP addresses looking for a non-private match.&lt;/p&gt;
&lt;p&gt;Since my initial release, based on MaxMind&#39;s 1.2.5, they&#39;ve put out a 1.2.7 which includes the addition of a &lt;em&gt;GeoIPUseLastXForwardedForIP&lt;/em&gt; flag. I can imagine what prompted this addition but as I said in my previous post this isn&#39;t the way to get the best IP address. As of writing, my current master branch is based on 1.2.7 and has this new flag but because the &lt;em&gt;first_public_ip_in_list&lt;/em&gt; is done first it&#39;s mostly useless.&lt;/p&gt;
&lt;p&gt;If anyone wants to hassle MaxMind on my behalf then feel free, I sent them an email a couple of months ago about this but received no answer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;Update 6-July-2012&lt;/strong&gt;&lt;/strong&gt;: A new release with some changes, details &lt;a href=&quot;http://rod.vagg.org/2012/07/mod_geoip2_xff-update/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>JavaScript and Semicolons</title>
      <link href="http://andreysidorov.com/2012/04/javascript-and-semicolons.html" />
      <updated>2012-04-20T06:10:16.000Z</updated>
      <id>http://andreysidorov.com/2012/04/javascript-and-semicolons.html</id>
      <content type="html">
        &lt;p&gt;In syntax terms, JavaScript is in the broad C-family of languages. The C-family is diverse and includes languages such as C (obviously), C++, Objective-C, Perl, Java, C# and the newer Go from Google and Rust from Mozilla. Common themes in these languages include:&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;
    &lt;li&gt;The use of curly braces to surround blocks.&lt;/li&gt;
    &lt;li&gt;The general insignificance of white space (spaces, tabs, new lines) except in very limited cases. Indentation is optional and is therefore a matter of style and preference, plus programs can be written on as few or as many lines as you want.&lt;/li&gt;
    &lt;li&gt;The use of semicolons to end statements, expressions and other constructs. Semicolons become the delimiter that the new line character is in white-space-significant languages.&lt;/li&gt;
&lt;/ul&gt;
JavaScript’s rules for curly braces, white space and semicolons are consistent with the C-family and its formal specification, known as the ECMAScript Language Specification makes this clear:&lt;/p&gt;
&lt;p&gt;&lt;blockquote&gt;Certain ECMAScript statements (empty statement, variable statement, expression statement, do-while statement, continue statement, break statement, return statement, and throw statement) must be terminated with semicolons.&lt;/blockquote&gt;
But it doesn’t end there–JavaScript introduces what’s known as &lt;strong&gt;Automatic Semicolon Insertion (ASI)&lt;/strong&gt;. The specification continues:&lt;/p&gt;
&lt;p&gt;&lt;blockquote&gt;Such semicolons may always appear explicitly in the source text. For convenience, however, such semicolons may be omitted from the source text in certain situations. These situations are described by saying that semicolons are automatically inserted into the source code token stream in those situations.&lt;/blockquote&gt;
The general C-family rules for semicolons can be found in most teaching material for JavaScript and has been advocated by most of the prominent JavaScript personalities since 1995. In a &lt;a href=&quot;https://brendaneich.com/2012/04/the-infernal-semicolon/&quot;&gt;recent post&lt;/a&gt;, JavaScript’s inventor, Brendan Eich, described ASI as “a syntactic error correction procedure”, (as in “&lt;a href=&quot;https://brendaneich.com/2012/04/the-infernal-semicolon/#comment-12268&quot;&gt;parsing error&lt;/a&gt;”, rather than “user error”).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;The rest of this article about semicolons in JavaScript can be found on &lt;a title=&quot;JavaScript and Semicolons&quot; href=&quot;http://dailyjs.com/2012/04/19/semicolons/&quot;&gt;DailyJS&lt;/a&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>Minifying HTML in the Servlet container</title>
      <link href="http://andreysidorov.com/2011/11/minifying-html-in-the-servlet-container.html" />
      <updated>2011-11-23T04:38:44.000Z</updated>
      <id>http://andreysidorov.com/2011/11/minifying-html-in-the-servlet-container.html</id>
      <content type="html">
        &lt;p&gt;Google&#39;s &lt;a title=&quot;mod_pagespeed&quot; href=&quot;http://code.google.com/speed/page-speed/docs/module.html&quot;&gt;mod_pagespeed&lt;/a&gt; is great. I&#39;ve been using it for a while now on &lt;a title=&quot;FeedXL Horse Nutrition&quot; href=&quot;http://feedxl.com&quot;&gt;feedxl.com&lt;/a&gt; but the only filter that I actually find really useful is &lt;a href=&quot;http://code.google.com/speed/page-speed/docs/filter-whitespace-collapse.html&quot;&gt;Collapse Whitespace&lt;/a&gt;; the rest of the filters I either already do myself as part of the site build process or I don&#39;t want applied. But, I imagine that there are a lot of admins out there that would really benefit from all of the clever things it can do.&lt;/p&gt;
&lt;p&gt;Unfortunately it&#39;s just an Apache2 module so it&#39;s a bit difficult to use the cleverness elsewhere. I recently launched a new service that serves content directly from Apache Tomcat without passing through an Apache2 web server like I would normally do (because there was just no need!). Having got used to the nice whitespace optimisations you can get from mod_pagespeed I decided to implement a simple version of my own for Tomcat. Dynamic content is somewhere that you&#39;re better off trying not to optimise your whitespace during generation, leave it for post-processing so your logic can be clear.&lt;/p&gt;
&lt;p&gt;So, enter &lt;strong&gt;HTMLMinifyFilter&lt;/strong&gt;. It&#39;s nowhere near as clever as mod_pagespeed but it&#39;ll do for basic needs. The core of it is a regular expression that will remove certain patterns and it&#39;s configurable so you decide which patterns to include.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;au&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xprime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;misc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;webapp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.regex.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HTMLMinifyFilter&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FilterChain&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ResponseWrapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResponseWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;&amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;&amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;replaceAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setContentLength&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PrintWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FilterConfig&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;StringBuffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;appendIf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;strip-linestart-whitespace&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;(?&lt;=^)[ \\t]+&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;appendIf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;strip-lineend-whitespace&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[ \\t]+(?:$)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;appendIf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;strip-multiple-whitespace&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;([ \\t](?:[ \\t]))+&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;appendIf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;strip-blank-lines&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;(\\n[ \\t]*(?:\\n))+&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MULTILINE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;appendIf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FilterConfig&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInitParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;&amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInitParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&#39;|&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseWrapper&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponseWrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CharArrayWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ResponseWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CharArrayWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PrintWriter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PrintWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;h3&gt;How does it work?&lt;/h3&gt;
We start off by wrapping our response in an object that will supply a CharArrayWriter so we can capture and process whatever the rest of the stack is doing (credit for this idea goes &lt;a href=&quot;http://stackoverflow.com/questions/5009650/where-can-i-find-a-java-servlet-filter-that-applies-regex-to-the-output&quot;&gt;here&lt;/a&gt;). We can then process the output with our regular expression(s) and pass it to the real response.&lt;/p&gt;
&lt;p&gt;Before I explain what the regular expressions do I want to caution that this won&#39;t be satisfactory in certain situations. It&#39;s not aware of &lt;script&gt;, &lt;pre&gt; or any other content where whitespace may be important, so unless you&#39;re sure stripping whitespace doesn&#39;t matter you may want to find a more intelligent solution.&lt;/p&gt;
&lt;p&gt;I&#39;ve split the regex up into 4 optional parts, you turn them on with init-parameters (explained later), matches of each of these are replaced with an empty string:&lt;/p&gt;
&lt;p&gt;&lt;h4&gt;&lt;strong&gt;strip-linestart-whitespace - (?&lt;=^)[ \t]+&lt;/strong&gt;&lt;/h4&gt;
This regex will match whitespace at the beginning of any line. You&#39;ll notice that I&#39;m not using \s for my whitespace match, this is because with multi-line pattern matching it&#39;ll also match \n and \r which we want to handle separately. The (?&lt;=^) at the beginning is a non-capturing positive look-behind for &lt;em&gt;line-start&lt;/em&gt;; so it&#39;ll match the start of the line but won&#39;t include it in our returned match-group so we only strip out the whitespace.&lt;/p&gt;
&lt;p&gt;This option is likely to make the biggest impact on HTML minification on dynamic content because we love to use indentation to define structure.&lt;/p&gt;
&lt;p&gt;&lt;h4&gt;&lt;strong&gt;&lt;/strong&gt;strip-lineend-whitespace - [ \t]+(?:$)&lt;/h4&gt;
Same deal as the linestart regex but this time we have (?:$), a non-capturing positive look-ahead for &lt;em&gt;line end&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This will pick up any sloppyness in your HTML (I wish I could do this in Microsoft Word when I have to edit other people&#39;s documents, you can&#39;t see it, &lt;strong&gt;but it&#39;s still there&lt;/strong&gt;!).&lt;/p&gt;
&lt;p&gt;&lt;h4&gt;strip-multiple-whitespace - ([ \t](?:[ \t]))+&lt;/h4&gt;
Here we have a group of one or more whitespace characters followed by another whitespace character, non-captured, so we don&#39;t strip out all whitespace, remember that we are replacing matches with an empty string so we need the non-capturing second space to leave one intact.&lt;/p&gt;
&lt;p&gt;This is probably going to be the most dangerous if you might have content where whitespace is important, e.g. &lt;script&gt;, &lt;pre&gt;.l&lt;/p&gt;
&lt;p&gt;&lt;h4&gt;strip-blank-lines - (\n[ \t]*(?:\n))+&lt;/h4&gt;
This is very similar to the multiple-whitespace regex but we match a newline, followed by zero or more whitespace characters, followed by a non-captured newline, all repeated one or more times. So we&#39;ll get rid of any lines that don&#39;t contain content.&lt;/p&gt;
&lt;p&gt;&lt;h3&gt;Configuration&lt;/h3&gt;
You simply put the filter into your classpath somewhere and wire it up in web.xml. You first define the filter reference and any parameters:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&lt;filter&gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&lt;filter-name&gt;&lt;/span&gt;htmlMinifyFilter&lt;span class=&quot;nt&quot;&gt;&lt;/filter-name&gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&lt;filter-class&gt;&lt;/span&gt;au.com.xprime.misc.webapp.filter.HTMLMinifyFilter&lt;span class=&quot;nt&quot;&gt;&lt;/filter-class&gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&lt;init-param&gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&lt;param-name&gt;&lt;/span&gt;strip-linestart-whitespace&lt;span class=&quot;nt&quot;&gt;&lt;/param-name&gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&lt;param-value&gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&lt;/param-value&gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&lt;/init-param&gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&lt;init-param&gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&lt;param-name&gt;&lt;/span&gt;strip-lineend-whitespace&lt;span class=&quot;nt&quot;&gt;&lt;/param-name&gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&lt;param-value&gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&lt;/param-value&gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&lt;/init-param&gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&lt;init-param&gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&lt;param-name&gt;&lt;/span&gt;strip-multiple-whitespace&lt;span class=&quot;nt&quot;&gt;&lt;/param-name&gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&lt;param-value&gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&lt;/param-value&gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&lt;/init-param&gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&lt;init-param&gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&lt;param-name&gt;&lt;/span&gt;strip-blank-lines&lt;span class=&quot;nt&quot;&gt;&lt;/param-name&gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&lt;param-value&gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&lt;/param-value&gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&lt;/init-param&gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&lt;/filter&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Any of the parameters can be set to &lt;i&gt;false&lt;/i&gt; or omitted all together to turn it off.&lt;/p&gt;
&lt;p&gt;Then you need to wire up the filter to any incoming URIs which is done just like servlet-mapping (but still hopelessly unhelpful, why can&#39;t we have proper regular expressions for these??). You&#39;ll notice that I&#39;m only using a Writer so even though it checks for a text/html response before it does any rewriting you won&#39;t want it touching any binary data because we don&#39;t wrap getOutputStream(). So, either make sure the filter only gets applied to text/html URIs or modify the filter to be binary-safe. I only have a few URIs that I want to apply this to so I&#39;ve put them in manually with one of these per URI:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&lt;filter-mapping&gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&lt;filter-name&gt;&lt;/span&gt;htmlMinifyFilter&lt;span class=&quot;nt&quot;&gt;&lt;/filter-name&gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&lt;url-pattern&gt;&lt;/span&gt;/myuri&lt;span class=&quot;nt&quot;&gt;&lt;/url-pattern&gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&lt;/filter-mapping&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But you can also do the simple url-pattern matching with &lt;em&gt;.ext or /&lt;/em&gt;, etc.&lt;/p&gt;
&lt;p&gt;And there you go! Cheap and easy HTML minification from within the Servlet container.&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>Handling X-Forwarded-For in Java and Tomcat</title>
      <link href="http://andreysidorov.com/2011/07/handling-x-forwarded-for-in-java-and-tomcat.html" />
      <updated>2011-07-30T04:49:50.000Z</updated>
      <id>http://andreysidorov.com/2011/07/handling-x-forwarded-for-in-java-and-tomcat.html</id>
      <content type="html">
        &lt;p&gt;This is the first follow-up to my &lt;a title=&quot;Wrangling the X-Forwarded-For Header&quot; href=&quot;http://rod.vagg.org/2011/07/wrangling-the-x-forwarded-for-header/&quot;&gt;post on X-Forwarded-For&lt;/a&gt;, I&#39;ll assume you&#39;ve at least scanned that article.&lt;/p&gt;
&lt;p&gt;&lt;h3&gt;Revision of the security issues&lt;/h3&gt;
It&#39;s important to recap the security message of my previous post. &lt;strong&gt;Don&#39;t assume that the content of the X-Forwarded-For header is either correct or syntactically valid&lt;/strong&gt;. The header is not hard to spoof and there are only certain situations where you may be able to trust parts of the content of the header.&lt;/p&gt;
&lt;p&gt;So, my simple advice is not to use this header for anything &lt;em&gt;important&lt;/em&gt;. Don&#39;t use it for authentication purposes or anything else that has security implications. It really should only be used for your own information purposes or to provide customised content for the user where it&#39;s OK to be basing that customisation on false information, because this will be a possibility.&lt;/p&gt;
&lt;p&gt;We use it on &lt;a href=&quot;http://feedxl.com/&quot;&gt;FeedXL&lt;/a&gt; for IP address geolocation using &lt;a href=&quot;http://www.maxmind.com/app/country&quot;&gt;GeoIP&lt;/a&gt; to serve country specific information to visitors. Ultimately it doesn&#39;t really matter a whole lot if we get it wrong; while there are differences in the content the differences aren&#39;t major. It may cause some confusion but that confusion can be resolved if the customer wants to contact us. You sign up to FeedXL based on your country but we still let you select your country from a list even though we pre-select the one we guess from your IP address. And if you sign up to the wrong country then you won&#39;t get access to the correct database for your country; hardly a major security issue, more of an inconvenience. If you&#39;re spoofing X-Forwarded-For then you&#39;re probably not the kind of person who&#39;s going to get confused at the content, you&#39;re probably just poking around and are not really interested in our product anyway!&lt;/p&gt;
&lt;p&gt;&lt;h3&gt;Extracting a useful IP address&lt;/h3&gt;
I ended my last post with a generalised rule for extracting the most likely useful IP address from the X-Forwarded-For header:&lt;/p&gt;
&lt;p&gt;&lt;blockquote&gt;&lt;strong&gt;&lt;em&gt;Always use the leftmost non-private address&lt;/em&gt;&lt;/strong&gt;.&lt;/blockquote&gt;
And I gave a couple of regular expressions to help with this process: &lt;code&gt;([0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3})&lt;/code&gt; or&lt;code&gt; (\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3})&lt;/code&gt; to match an IP address. And &lt;code&gt;(^127.0.0.1)|(^10.)|(^172.1[6-9].)|(^172.2[0-9].)|(^172.3[0-1].)|(^192.168.)&lt;/code&gt;. To match a private IP address.&lt;/p&gt;
&lt;p&gt;&lt;h3&gt;Java use cases&lt;/h3&gt;
In my Java code I have 2 uses for the IP address from X-Forwarded-For, both of these come up because we&#39;re working behind a load balancer (Amazon&#39;s &lt;a href=&quot;http://aws.amazon.com/elasticloadbalancing/&quot;&gt;Elastic Load Balancing&lt;/a&gt;) and don&#39;t have direct access to the remote host information:&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;
    &lt;li&gt;Looking up the country information in the GeoIP database using their Java API. Most of our use of GeoIP is with &lt;a href=&quot;http://geolite.maxmind.com/download/geoip/api/mod_geoip2/&quot;&gt;mod_geoip&lt;/a&gt; in &lt;a href=&quot;http://httpd.apache.org/&quot;&gt;Apache &lt;/a&gt;but we also want to occasionally use it from within a &lt;a href=&quot;http://www.oracle.com/technetwork/java/javaee/servlet/index.html&quot;&gt;servlet&lt;/a&gt;. For example, on our sign-up page we pre-select the country at the top of the page based on your IP address, this is done within Java.&lt;/li&gt;
    &lt;li&gt;More interesting logging from &lt;a href=&quot;http://tomcat.apache.org/&quot;&gt;Tomcat&lt;/a&gt;: if I want to have &lt;a href=&quot;http://tomcat.apache.org/tomcat-6.0-doc/config/valve.html#Access_Log_Valve&quot;&gt;AccessLogValve&lt;/a&gt; turned on, the host information isn&#39;t very interesting behind a load balancer.&lt;/li&gt;
&lt;/ul&gt;
A generic parser would serve both of these purposes!&lt;/p&gt;
&lt;p&gt;&lt;h3&gt;Parsing X-Forwarded-For&lt;/h3&gt;
I have created a simple utility class to do the parsing, called from wherever I need either an &lt;strong&gt;IP address&lt;/strong&gt; or a &lt;strong&gt;hostname&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;au&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xprime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;webapp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.net.Inet4Address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.net.InetAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.net.UnknownHostException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.regex.Matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.regex.Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.http.HttpServletRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InetAddressUtil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IP_ADDRESS_REGEX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PRIVATE_IP_ADDRESS_REGEX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;(^127\\.0\\.0\\.1)|(^10\\.)|(^172\\.1[6-9]\\.)|(^172\\.2[0-9]\\.)|(^172\\.3[0-1]\\.)|(^192\\.168\\.)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IP_ADDRESS_PATTERN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PRIVATE_IP_ADDRESS_PATTERN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findNonPrivateIpAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP_ADDRESS_PATTERN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;IP_ADDRESS_PATTERN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP_ADDRESS_REGEX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;PRIVATE_IP_ADDRESS_PATTERN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PRIVATE_IP_ADDRESS_REGEX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Matcher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IP_ADDRESS_PATTERN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PRIVATE_IP_ADDRESS_PATTERN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAddressFromRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forwardedFor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-Forwarded-For&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forwardedFor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;&amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forwardedFor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findNonPrivateIpAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forwardedFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forwardedFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRemoteAddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getHostnameFromRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getAddressFromRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inet4Address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHostName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InetAddress&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInet4AddressFromRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnknownHostException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inet4Address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getAddressFromRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;(Download &lt;a href=&quot;http://src.vagg.org/java/InetAddressUtil.java&quot;&gt;here&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Given an &lt;code&gt;HttpServletRequest&lt;/code&gt; we can call either &lt;code&gt;getAddressFromRequest()&lt;/code&gt; or &lt;code&gt;getHostnameFromRequest()&lt;/code&gt; to get the data we need.&lt;/p&gt;
&lt;p&gt;We first use the general IP address regular expression and on line 23 we loop through each match we find, starting from the left of the beginning of the string. This way we don&#39;t even look at the commas in the string and don&#39;t care if there are any spaces or not. We also get to avoid any nonsense data that may be in the string. If you spoof the header with a random string of characters then it&#39;ll be ignored. The code is quite strict in that it&#39;ll only bother with non-private IP addresses in the header, otherwise it will resort to the remote address of the request as a fall-back.&lt;/p&gt;
&lt;p&gt;Our hostname resolution is also prepared for failure and will return the original IP address if it can&#39;t get you a hostname.&lt;/p&gt;
&lt;p&gt;Instead of just calling &lt;code&gt;request.getRemoteAddr()&lt;/code&gt; and &lt;code&gt;request.getRemoteHost()&lt;/code&gt; from our own code, you&#39;d simply wrap them in &lt;code&gt;InetAddressUtil.getAddressFromRequest(request)&lt;/code&gt; and &lt;code&gt;InetAddressUtil.getHostnameFromRequest(request)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;h3&gt;Extending Tomcat logging&lt;/h3&gt;
You enable request logging in Tomcat by attaching an AccessLogValve to your context or host. It mirrors the custom formatting options that you&#39;ll find in &lt;a href=&quot;http://httpd.apache.org/docs/2.0/mod/mod_log_config.html&quot;&gt;Apache&#39;s CustomLog&lt;/a&gt;. So, you can print out a &lt;strong&gt;%h&lt;/strong&gt; for the request hostname but behind a load balancer you&#39;ll just get the name or address of the load balancer that&#39;s forwarding the request. You could also just use &lt;strong&gt;%{X-Forwarded-For}i&lt;/strong&gt; to get access to the raw header value, but this will either just be an IP address or a comma separated string of IP addresses. This may be useful for your purposes but not mine, I want a hostname!&lt;/p&gt;
&lt;p&gt;Unfortunately, AccessLogValve doesn&#39;t lend itself to easy extension, there are two &lt;code&gt;createAccessLogElement()&lt;/code&gt; methods that you&#39;d ideally be able to overwrite in your own subclass and return a new custom &lt;code&gt;AccessLogElement&lt;/code&gt; for the character you&#39;ve chosen to represent your log element.&lt;/p&gt;
&lt;p&gt;The best we can do is overwrite the protected &lt;code&gt;createLogElements&lt;/code&gt; and copy the functionality from there and extend with our own. However, in my extension of AccessLogValve I&#39;ve assumed that the Tomcat boys will eventually &lt;a href=&quot;https://issues.apache.org/bugzilla/show_bug.cgi?id=51588&quot;&gt;fix&lt;/a&gt; the access modifiers for the &lt;code&gt;createLogElement()&lt;/code&gt; methods so I&#39;ve just copied the whole class, named it &lt;code&gt;AccessLogValve&lt;em&gt;&lt;/code&gt; and changed the modifiers myself. The plan being to remove this in the future and take the &lt;/em&gt; of the extended class name in my code.&lt;/p&gt;
&lt;p&gt;Here&#39;s my extended AccessLogValve&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;au&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xprime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;catalina&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valves&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.catalina.connector.Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.catalina.connector.Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;au.com.xprime.webapp.util.InetAddressUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccessLogValve&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;catalina&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valves&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AccessLogValve_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ForwardedForAddrElement&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccessLogElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringBuffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InetAddressUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAddressFromRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ForwardedForHostElement&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ForwardedForAddrElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringBuffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InetAddressUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHostnameFromRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccessLogElement&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createAccessLogElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;AccessLogElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accessLogElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createAccessLogElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accessLogElement&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#39;f&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ForwardedForAddrElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#39;F&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ForwardedForHostElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accessLogElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;(Download &lt;a href=&quot;http://src.vagg.org/java/AccessLogValve.java&quot;&gt;here&lt;/a&gt; and AccessLogValve&lt;em&gt; &lt;a href=&quot;&lt;a href=&quot;http://src.vagg.org/java/AccessLogValve&quot;&gt;http://src.vagg.org/java/AccessLogValve&lt;/a&gt;&lt;/em&gt;.java&quot;&gt;here&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Which gives me &lt;strong&gt;%f&lt;/strong&gt; for the X-Forwarded-For IP address and %F for the X-Forwarded-For address. My valve pattern looks like this:&lt;/p&gt;
&lt;p&gt;&lt;code style=&quot;padding-left: 30px;&quot;&gt;pattern=&quot;%F %f %h %l %u %t %r&quot; %s %b &quot;%{Referer}i&quot; &quot;%{User-Agent}i&quot;&quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Simply compile, place together in a JAR, put it in your Tomcat lib directory then make sure you use the right class name when building your AccessLogValve descriptor. The lazy can find a JAR (including source) &lt;a href=&quot;http://src.vagg.org/java/xprime_accesslogvalve.jar&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next I&#39;ll be getting dirty with C and hack mod_geoip to do something similar.&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>Wrangling the X-Forwarded-For Header</title>
      <link href="http://andreysidorov.com/2011/07/wrangling-the-x-forwarded-for-header.html" />
      <updated>2011-07-29T06:15:36.000Z</updated>
      <id>http://andreysidorov.com/2011/07/wrangling-the-x-forwarded-for-header.html</id>
      <content type="html">
        &lt;p&gt;Until recently, we&#39;ve served pages directly from the server for &lt;a title=&quot;FeedXL D. I. Y. Horse Nutrition&quot; href=&quot;http://feedxl.com/&quot;&gt;FeedXL.com&lt;/a&gt; but we&#39;ve since moved to a load balancing situation with multiple servers behind a load balancer.&lt;/p&gt;
&lt;p&gt;&lt;h3&gt;&lt;strong&gt;AWS &amp; ELB&lt;/strong&gt;&lt;/h3&gt;
We use &lt;a title=&quot;Amazon Web Services&quot; href=&quot;http://aws.amazon.com&quot;&gt;Amazon Web Services&lt;/a&gt; to host FeedXL and are now using their &lt;strong&gt;&lt;a title=&quot;AWS Elastic Load Balancing&quot; href=&quot;http://aws.amazon.com/elasticloadbalancing/&quot;&gt;Elastic Load Balancing&lt;/a&gt; (ELB)&lt;/strong&gt; service to spread the load across 3 &lt;em&gt;Availability Zones&lt;/em&gt; in the main datacentre we operate from. We&#39;re doing this primarily for high availability purposes rather than to handle heavy load but the added benefit is that it lets us scale up really easily if we have any sudden spikes in our traffic. We&#39;re using some small instances at the front using &lt;a href=&quot;http://httpd.apache.org/&quot;&gt;Apache&lt;/a&gt; to handle the main traffic. The dynamic content is passed on to larger back-end instances running our webapp in &lt;a href=&quot;http://tomcat.apache.org/&quot;&gt;Tomcat&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A couple of our important &lt;a href=&quot;http://aws.amazon.com/ebs/&quot;&gt;EBS&lt;/a&gt; volumes were among the last to be restored during &lt;a href=&quot;http://alestic.com/2011/04/ec2-outage&quot;&gt;Judgement Day&lt;/a&gt;, April 2011 and while we had regular snapshots we hesitated for too long before rebuilding our service in a different Availability Zone (or Region), partly because of lack of clear information about the outage from Amazon (we were continually given the impression that it wouldn&#39;t be long before things were back online, so why not wait just a tiny bit longer to restore to normal service than restore from slightly older snapshots?). Probably like many AWS customers impacted by the outage, we&#39;ve increased our spend to boost our redundancy to better handler outages of this kind. We now span multiple Availability Zones and have increased the quality of our off-Region backups. I&#39;m pretty sure that in the end Amazon has ended up doing very well from their rather embarrassing incident with many customers keen to avoid their own embarrassment the next time it happens.&lt;/p&gt;
&lt;p&gt;However, switching to ELB hasn&#39;t been without hiccups.&lt;/p&gt;
&lt;p&gt;&lt;h3&gt;GeoIP&lt;/h3&gt;
We rely very heavily on &lt;a href=&quot;http://www.maxmind.com/app/country&quot;&gt;GeoIP&lt;/a&gt; from MaxMind to serve content customised to each country. We have a large amount of functionality built right in to our Apache configuration that uses both &lt;a href=&quot;http://httpd.apache.org/docs/2.0/mod/mod_rewrite.html&quot;&gt;rewrites&lt;/a&gt; and &lt;a href=&quot;http://httpd.apache.org/docs/2.0/mod/mod_include.html&quot;&gt;SSI&lt;/a&gt; to make our static content relatively dynamic. We even do spelling correction for UK/US English depending on where you view our site from! The main reason we customise content though is because FeedXL is a different product for each country. We have to maintain country specific feeds databases and we also mostly deal with local currencies so our price details change a little depending on where you are. We&#39;ve had a very good experience with GeoIP with only a few mismatches reported by customers and they&#39;ve always been corporate networks where traffic is routed internationally (Australia-&gt;USA or NZ-&gt;AU for example) or satellite connections without a likely country of origin.&lt;/p&gt;
&lt;p&gt;The way that &lt;a href=&quot;http://geolite.maxmind.com/download/geoip/api/mod_geoip2/&quot;&gt;mod_geoip&lt;/a&gt; for Apache works is that it takes the request IP address and looks it up in its database to find the (most likely) country of origin, you then get environment variables in your Apache request: GEOIP_COUNTRY_CODE &amp; GEOIP_COUNTRY_NAME. You can use these with mod_rewrite to do all sorts of crazy things, plus mod_include lets you do more straightforward things with your content. For example, if we want to make a North America specific announcement we might wrap our announcement block in &lt;code&gt;&lt;!--#if expr=&#39;&quot;$GEOIP_COUNTRY_CODE&quot; = &quot;US&quot; || &quot;$GEOIP_COUNTRY_CODE&quot; = &quot;CA&quot;&#39; --&gt; &lt;em&gt;... content ... &lt;/em&gt;&lt;!--#endif --&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, one of the most important catches of load balancing is that your requests come to your web server from the load balancer itself and not the original client, so you don&#39;t get the raw IP address of the client built into your request. Instead, with ELB and most other load balancers you need to use the &lt;a href=&quot;http://en.wikipedia.org/wiki/X-Forwarded-For&quot;&gt;&lt;strong&gt;X-Forwarded-For&lt;/strong&gt; &lt;/a&gt;HTTP header.&lt;/p&gt;
&lt;p&gt;&lt;h3&gt;X-Forwarded-For&lt;/h3&gt;
The X-Forwarded-For header was first introduced by &lt;a href=&quot;http://www.squid-cache.org/&quot;&gt;Squid&lt;/a&gt; as a means of passing on the IP address of the client to the server. It has since been widely adopted by other proxy servers and load balancers so it&#39;s pretty much considered a &lt;em&gt;standard&lt;/em&gt; even if it technically isn&#39;t.&lt;/p&gt;
&lt;p&gt;What you are supposed to get as your header is this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;X-Forwarded-For: clientIP, server1IP, server2IP, server3IP&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The client IP address should be first, followed by first proxy server, followed by any other servers in a comma separated list. The final server that passes the request on to you won&#39;t be in the list, &lt;span style=&quot;text-decoration: underline;&quot;&gt;a proxy server or load balancer will only append the address of server it received the request from if the X-Forwarded-For header was passed to it&lt;/span&gt; otherwise it just constructs a new X-Forwarded-For with just the client address in it. The address of the last server in the complete &lt;em&gt;chain&lt;/em&gt; is simply the address of the client making the request to your server. But as usual in the web world there are no guarantees.&lt;/p&gt;
&lt;p&gt;Apache kindly gives you an HTTP_X_FORWARDED_FOR environment variable (although I can&#39;t find official documentation on this so I&#39;m not sure of the specifics of what conditions may prevent you from getting this variable). You could use this in custom modules or standard modules that use environment variables such as mod_rewrite. If you want to log with it then you could configure your &lt;code&gt;LogFormat&lt;/code&gt; to print it out with &lt;code&gt;%{X-Forwarded-For}i&lt;/code&gt; to make your logs more interesting than just showing the load balancer hostname as &lt;code&gt;%h&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;mod_geoip has a configuration switch, &lt;code&gt;GeoIPScanProxyHeaders On&lt;/code&gt; that tells it to use X-Forwarded-For (or HTTP_X_FORWARDED_FOR) to determine the client IP address rather than just the remote address.&lt;/p&gt;
&lt;p&gt;There are some important catches to consider before you proceed to use this header to do anything interesting:&lt;/p&gt;
&lt;p&gt;&lt;ol&gt;
    &lt;li&gt;Most importantly, headers can be crafted by anyone, &lt;strong&gt;never trust a header value unless you are certain that it can&#39;t be spoofed&lt;/strong&gt;. I&#39;d actually just simplify that to just &lt;em&gt;never trust a header value&lt;/em&gt;. So if you are going to use it then don&#39;t use it for anything that has security implications.&lt;/li&gt;
    &lt;li&gt;The client IP address that you get from the first entry may not actually be the address that you want. Most of the time the requests will probably come directly from the browser of your visitor but what if they are behind a proxy server within a private network themselves? The IP address you may end up with could be something like 10.1.34.121 which is of no value because it only tells you that they are sitting on a private network &lt;em&gt;somewhere&lt;/em&gt; in the world.&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;
&lt;p&gt;&lt;h3&gt;Security Implications&lt;/h3&gt;
This is pretty straightforward. If you&#39;re in the situation of handling traffic behind a load balancer then you may be able to guarantee that your traffic comes from the load balancer so the header is constructed by it, but consider the situation where X-Forwarded-For contains a chain of addresses, potentially from untrusted sources. If the header contains at least one &lt;em&gt;server&lt;/em&gt; IP address then the &lt;em&gt;client&lt;/em&gt; IP address will have been passed on by the upstream server with no way for your load balancer to verify its correctness; all it&#39;s doing is adding the address of the requesting host onto the end of the list.&lt;/p&gt;
&lt;p&gt;There&#39;s also the possibility of direct connections to your web server(s). Are your servers walled off from the outside world with only the load balancer able to communicate with it? Is there a possibility that a client can make a direct connection to your server and construct its own X-Forwarded-For header? On AWS, all standard instances have a public IP address but you can set up your &lt;a href=&quot;http://docs.amazonwebservices.com/AWSEC2/2007-08-29/DeveloperGuide/distributed-firewall-concepts.html&quot;&gt;security groups &lt;/a&gt;to only allow access to port 80 from your load balancer. This is probably a good idea for many reasons.&lt;/p&gt;
&lt;p&gt;Basically, I would suggest working on the assumption that X-Forwarded-For is only &lt;em&gt;likely&lt;/em&gt; to be correct, nothing more.&lt;/p&gt;
&lt;p&gt;&lt;h3&gt;Best Guess IP Address&lt;/h3&gt;
When using X-Forwarded-For, the assumption normally made is that the first IP address in the list is the client address that you can use to do interesting things with, like IP address geolocation (à la GeoIP). But what about &lt;a href=&quot;http://en.wikipedia.org/wiki/Private_network&quot;&gt;private addresses&lt;/a&gt;? What about the casual browser at McDonalds using their WiFi with a 10.x.x.x address or a company network with a 192.168.x.x internal address structure? You&#39;ll end up with a very unhelpful address that&#39;ll tell you nothing very interesting about the client.&lt;/p&gt;
&lt;p&gt;There are 3 sets of address ranges in &lt;a href=&quot;http://en.wikipedia.org/wiki/IPv4&quot;&gt;IPv4&lt;/a&gt; (lets ignore &lt;a href=&quot;http://en.wikipedia.org/wiki/IPv6&quot;&gt;IPv6&lt;/a&gt; for now) that are reserved for private networks. Normally these are hidden behind &lt;a href=&quot;http://en.wikipedia.org/wiki/Network_address_translation&quot;&gt;NAT&lt;/a&gt; gateways and often traffic is forced to either manually or automatically route through a proxy server of some kind. The address ranges are:&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;
    &lt;li&gt;10.0.0.0 – 10.255.255.255&lt;/li&gt;
    &lt;li&gt;172.16.0.0 – 172.31.255.255&lt;/li&gt;
    &lt;li&gt;192.168.0.0 – 192.168.255.255&lt;/li&gt;
&lt;/ul&gt;
You can thank these beauties for extending the life of IPv4 way beyond what it would otherwise have been.&lt;/p&gt;
&lt;p&gt;If you have a client behind one of these networks and it&#39;s not routed through a proxy server then you&#39;ll probably just get the IP address of the NAT gateway which is likely to be the address you want to use. If the request is routed through a proxy server then you may get an X-Forwarded-For that looks something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;X-Forwarded-For: 10.208.4.38, 58.163.175.187&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where the address you probably want is actually the (proxy) server address on the end rather than the private client address.&lt;/p&gt;
&lt;p&gt;You may also have a chain of multiple servers, perhaps you have a downstream proxy server going through a larger upstream one before heading out of the network, so you may get something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;X-Forwarded-For: 10.208.4.38, 58.163.1.4, 58.163.175.187&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or, the downstream proxy server could be within the private network, perhaps a departmental proxy server connecting to a company-wide proxy server and then this may happen:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;X-Forwarded-For: 10.208.4.38, 10.10.300.23, 58.163.175.187&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This could of course be even more complex as you may have a longer chain of proxy servers (although I&#39;ve never actually seen anyone chain more than 2 layers of proxy servers together in a network before).&lt;/p&gt;
&lt;p&gt;So what general rule should we construct for extracting our usable client IP from these addresses?&lt;/p&gt;
&lt;p&gt;Of course, I&#39;m suggesting that the rule: &lt;strong&gt;&lt;em&gt;always use the leftmost address&lt;/em&gt;&lt;/strong&gt; is not correct as there is a good chance it may be a private IP address if there is more than 1 address in the list. Unfortunately this is the rule that mod_geoip adopts, if it finds a comma it just chops off the string at that comma. We immediately found this led to unsatisfactory results with ELB as we had more requests than we expected originating from private networks routed through proxy servers; and we heard about it in the form of error reports from our users (&lt;em&gt;&quot;where&#39;s the log in link?&quot;&lt;/em&gt;--it&#39;s not normally displayed in countries where we haven&#39;t released FeedXL).&lt;/p&gt;
&lt;p&gt;An alternative would be &lt;strong&gt;&lt;em&gt;always use the rightmost address&lt;/em&gt;&lt;/strong&gt; which would probably get you a pretty good guess in almost all cases. If there is more than one IP address in the list then the rightmost address will probably be the address where the request left whatever corporate or internal network the client was hidden behind, even if there are multiple layers. However, multiple layers of IP addresses suggests a fairly large network, possibly widely disbursed. There&#39;s also a chance that you have one proxy server piggybacking off a higher capacity upstream proxy server: for example, some ISPs run their own very large proxy servers that customers can use and may make ideal upstream connections for internal proxy servers with caching at both levels. The ISP proxy server is likely to be located in a very different place to the client though and if you&#39;re trying to pin down the IP address of the client using something like &lt;a href=&quot;http://www.maxmind.com/app/city&quot;&gt;GeoIP City&lt;/a&gt; then you&#39;ll probably get the wrong city.&lt;/p&gt;
&lt;p&gt;So, here&#39;s the rule that I suggest would be the best general case rule to allow you to extract the address most likely to be physically close to the real client:&lt;/p&gt;
&lt;p&gt;&lt;p style=&quot;padding-left: 30px;&quot;&gt;&lt;strong&gt;&lt;em&gt;Always use the leftmost &lt;span style=&quot;text-decoration: underline;&quot;&gt;non-private&lt;/span&gt; address&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
We can do this because the rules are clear about what is and what is not a private IP address (see above).&lt;/p&gt;
&lt;p&gt;&lt;h3&gt;Doing It the Regular Expression Way&lt;/h3&gt;
First, remember that the X-Forwarded-For header is not very trustworthy. You don&#39;t want to even assume that it contains IP addresses! So, before you even check if an entry is a private IP address or not you should probably simply check if it&#39;s an IP address.&lt;/p&gt;
&lt;p&gt;Here&#39;s a simple regular expression to match an IP address: &lt;code&gt;([0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3})&lt;/code&gt; or alternatively, if you&#39;re working in an environment that supports \d then this will do the same thing: &lt;code&gt;(\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3})&lt;/code&gt; (with or without the parentheses but as you&#39;ll see, they are useful for the next step).&lt;/p&gt;
&lt;p&gt;Then you&#39;ll want to check if an IP address is private or not, here&#39;s a regular expression that&#39;ll do that for you, given a valid IP address: &lt;code&gt;(^127.0.0.1)|(^10.)|(^172.1[6-9].)|(^172.2[0-9].)|(^172.3[0-1].)|(^192.168.)&lt;/code&gt;. This matches all of the addresses matched in the ranges above and 127.0.0.1 as a bonus (quite possible in our chain!).&lt;/p&gt;
&lt;p&gt;So a general algorithm could be something like this: walk through the string starting from the first match of our general IP address regular expression through to the last. For each match, check if the matched component matches our private IP address regular expression, if it does then proceed to the next address in the list, if it doesn&#39;t match then we have the IP address we want. If we get to the end of the list without finding an IP address that isn&#39;t private then we have to have some kind of generic fall-back.&lt;/p&gt;
&lt;p&gt;Exactly what your fall-back might be depends on your environment and whether your trust the server passing you the request or not. In the case of ELB, if it&#39;s working properly we should never need the fall-back case. For FeedXL our fall-back for any failure during the GeoIP process is to just assume that they are coming from the country where most of our customers are from (currently Australia).&lt;/p&gt;
&lt;p&gt;I have 2 follow-up posts to make after this one, first I&#39;ll show how I deal with X-Forwarded-For in both Tomcat and our own Java software, then I&#39;ll show how I&#39;ve hacked mod_geoip to use the algorithm outlined above with excellent results.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Follow-up #1: &lt;a title=&quot;Permanent Link to Handling X-Forwarded-For in Java and Tomcat&quot; href=&quot;http://rod.vagg.org/2011/07/handling-x-forwarded-for-in-java-and-tomcat/&quot; rel=&quot;bookmark&quot;&gt;Handling X-Forwarded-For in Java and Tomcat&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Follow-up #2: &lt;a title=&quot;A mod_geoip2 that properly handles X-Forwarded-For&quot; href=&quot;http://rod.vagg.org/2012/04/a-mod_geoip2-that-properly-handles-x-forwarded-for/&quot;&gt;&lt;strong&gt;&lt;em&gt;A mod_geoip2 that properly handles X-Forwarded-For&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;
&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;h3&gt;Update July 30th 2011&lt;/h3&gt;
I&#39;ve just stumbled upon &lt;a title=&quot;X-Forwarded-For Spoofer&quot; href=&quot;https://addons.mozilla.org/en-US/firefox/addon/x-forwarded-for-spoofer/&quot;&gt;this&lt;/a&gt;, an &quot;X-Forwarded-For Spoofer&quot; Add-On for Firefox and I love the description, sums up the security concerns:&lt;/p&gt;
&lt;p&gt;&lt;blockquote&gt;&lt;em&gt;Some clients add X-Forwarded-For to HTTP requests in an attempt to help servers identify the originating IP address of a request. Some clients, however, can set X-Forwarded-For to any arbitrary value. Some servers assume X-Forwarded-For is unassailable. No server should.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;With this add-on, you can assign an arbitrary IP address to the X-Forwarded-For field, attempt to perform XSS by including HTML in this field, or even attempt SQL injection.&lt;/em&gt;&lt;/blockquote&gt;
May be useful for testing and debugging your web application.&lt;/p&gt;

      </content>
    </entry>
  

 </feed>